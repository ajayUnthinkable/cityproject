(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),require('@angular/forms'),exports, require('@angular/core'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-otp-input', ['@angular/core','@angular/common','@angular/forms','exports', '@angular/core', '@angular/forms', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ng.common,global.ng.forms,global['ng-otp-input'] = {}, global.ng.core, global.ng.forms, global.ng.common));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,exports, core, forms, common) { 
function NgOtpInputComponent_div_0_input_1_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 3);
    ɵngcc0.ɵɵlistener("keydown", function NgOtpInputComponent_div_0_input_1_Template_input_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); var ctx_r4 = ɵngcc0.ɵɵnextContext(2); return ctx_r4.onKeyDown($event); })("keyup", function NgOtpInputComponent_div_0_input_1_Template_input_keyup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); var i_r3 = ctx.index; var ctx_r6 = ɵngcc0.ɵɵnextContext(2); return ctx_r6.onKeyUp($event, i_r3); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var item_r2 = ctx.$implicit;
    var i_r3 = ctx.index;
    var ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassMapInterpolate1("otp-input ", ctx_r1.config.inputClass, "");
    ɵngcc0.ɵɵpropertyInterpolate2("id", "otp_", i_r3, "_", ctx_r1.componentKey, "");
    ɵngcc0.ɵɵproperty("pattern", ctx_r1.config.allowNumbersOnly ? "\\d*" : "")("type", ctx_r1.inputType)("placeholder", (ctx_r1.config == null ? null : ctx_r1.config.placeholder) || "")("disabledNumberOnly", !ctx_r1.config.allowNumbersOnly)("ngStyle", ctx_r1.config.inputStyles)("formControl", ctx_r1.otpForm.controls[item_r2]);
} }
function NgOtpInputComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵtemplate(1, NgOtpInputComponent_div_0_input_1_Template, 1, 11, "input", 2);
    ɵngcc0.ɵɵpipe(2, "keys");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMapInterpolate1("wrapper ", ctx_r0.config.containerClass, "");
    ɵngcc0.ɵɵpropertyInterpolate1("id", "c_", ctx_r0.componentKey, "");
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r0.config.containerStyles);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 6, ctx_r0.otpForm == null ? null : ctx_r0.otpForm.controls));
} }
'use strict';

    var KeysPipe = /** @class */ (function () {
        function KeysPipe() {
        }
        KeysPipe.prototype.transform = function (value) {
            return Object.keys(value);
        };
KeysPipe.ɵfac = function KeysPipe_Factory(t) { return new (t || KeysPipe)(); };
KeysPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "keys", type: KeysPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(KeysPipe, [{
        type: core.Pipe,
        args: [{
                name: 'keys'
            }]
    }], function () { return []; }, null); })();
        return KeysPipe;
    }());

    var NgOtpInputComponent = /** @class */ (function () {
        function NgOtpInputComponent(keysPipe) {
            this.keysPipe = keysPipe;
            this.config = { length: 4 };
            // tslint:disable-next-line: no-output-on-prefix
            this.onInputChange = new core.EventEmitter();
            this.inputControls = new Array(this.config.length);
            this.componentKey = Math.random()
                .toString(36)
                .substring(2) + new Date().getTime().toString(36);
        }
        NgOtpInputComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.otpForm = new forms.FormGroup({});
            for (var index = 0; index < this.config.length; index++) {
                this.otpForm.addControl(this.getControlName(index), new forms.FormControl());
            }
            this.otpForm.valueChanges.subscribe(function (v) {
                _this.keysPipe.transform(_this.otpForm.controls).forEach(function (k) {
                    var val = _this.otpForm.controls[k].value;
                    if (val && val.length > 1) {
                        if (val.length >= _this.config.length) {
                            _this.setValue(val);
                        }
                        else {
                            _this.rebuildValue();
                        }
                    }
                });
            });
            this.inputType = this.getInputType();
        };
        NgOtpInputComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (!this.config.disableAutoFocus) {
                var containerItem = document.getElementById("c_" + this.componentKey);
                if (containerItem) {
                    containerItem.addEventListener('paste', function (evt) { return _this.handlePaste(evt); });
                    var ele = containerItem.getElementsByClassName('otp-input')[0];
                    if (ele && ele.focus) {
                        ele.focus();
                    }
                }
            }
        };
        NgOtpInputComponent.prototype.getControlName = function (idx) {
            return "ctrl_" + idx;
        };
        NgOtpInputComponent.prototype.ifLeftArrow = function (event) {
            return this.ifKeyCode(event, 37);
        };
        NgOtpInputComponent.prototype.ifRightArrow = function (event) {
            return this.ifKeyCode(event, 39);
        };
        NgOtpInputComponent.prototype.ifBackspaceOrDelete = function (event) {
            return (event.key === 'Backspace' ||
                event.key === 'Delete' ||
                this.ifKeyCode(event, 8) ||
                this.ifKeyCode(event, 46));
        };
        NgOtpInputComponent.prototype.ifKeyCode = function (event, targetCode) {
            var key = event.keyCode || event.charCode;
            // tslint:disable-next-line: triple-equals
            return key == targetCode ? true : false;
        };
        NgOtpInputComponent.prototype.onKeyDown = function ($event) {
            var isSpace = this.ifKeyCode($event, 32);
            if (isSpace) { // prevent space
                return false;
            }
        };
        NgOtpInputComponent.prototype.onKeyUp = function ($event, inputIdx) {
            var nextInputId = this.appendKey("otp_" + (inputIdx + 1));
            var prevInputId = this.appendKey("otp_" + (inputIdx - 1));
            if (this.ifRightArrow($event)) {
                this.setSelected(nextInputId);
                return;
            }
            if (this.ifLeftArrow($event)) {
                this.setSelected(prevInputId);
                return;
            }
            var isBackspace = this.ifBackspaceOrDelete($event);
            if (isBackspace && !$event.target.value) {
                this.setSelected(prevInputId);
                this.rebuildValue();
                return;
            }
            if (!$event.target.value) {
                return;
            }
            if (this.ifValidEntry($event)) {
                this.setSelected(nextInputId);
            }
            this.rebuildValue();
        };
        NgOtpInputComponent.prototype.appendKey = function (id) {
            return id + "_" + this.componentKey;
        };
        NgOtpInputComponent.prototype.setSelected = function (eleId) {
            this.focusTo(eleId);
            var ele = document.getElementById(eleId);
            if (ele && ele.setSelectionRange) {
                setTimeout(function () {
                    ele.setSelectionRange(0, 1);
                }, 0);
            }
        };
        NgOtpInputComponent.prototype.ifValidEntry = function (event) {
            var inp = String.fromCharCode(event.keyCode);
            var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
            return (isMobile ||
                /[a-zA-Z0-9-_]/.test(inp) ||
                (this.config.allowKeyCodes &&
                    this.config.allowKeyCodes.includes(event.keyCode)) ||
                (event.keyCode >= 96 && event.keyCode <= 105));
        };
        NgOtpInputComponent.prototype.focusTo = function (eleId) {
            var ele = document.getElementById(eleId);
            if (ele) {
                ele.focus();
            }
        };
        // method to set component value
        NgOtpInputComponent.prototype.setValue = function (value) {
            var _this = this;
            if (this.config.allowNumbersOnly && isNaN(value)) {
                return;
            }
            this.otpForm.reset();
            if (!value) {
                this.rebuildValue();
                return;
            }
            value = value.toString().replace(/\s/g, ''); // remove whitespace
            Array.from(value).forEach(function (c, idx) {
                if (_this.otpForm.get(_this.getControlName(idx))) {
                    _this.otpForm.get(_this.getControlName(idx)).setValue(c);
                }
            });
            if (!this.config.disableAutoFocus) {
                var containerItem = document.getElementById("c_" + this.componentKey);
                var indexOfElementToFocus = value.length < this.config.length ? value.length : (this.config.length - 1);
                var ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];
                if (ele && ele.focus) {
                    ele.focus();
                }
            }
            this.rebuildValue();
        };
        NgOtpInputComponent.prototype.rebuildValue = function () {
            var _this = this;
            var val = '';
            this.keysPipe.transform(this.otpForm.controls).forEach(function (k) {
                if (_this.otpForm.controls[k].value) {
                    var ctrlVal = _this.otpForm.controls[k].value;
                    var isLengthExceed = ctrlVal.length > 1;
                    var isCaseTransformEnabled = !_this.config.allowNumbersOnly && _this.config.letterCase && (_this.config.letterCase.toLocaleLowerCase() == 'upper' || _this.config.letterCase.toLocaleLowerCase() == 'lower');
                    ctrlVal = ctrlVal[0];
                    var transformedVal = isCaseTransformEnabled ? _this.config.letterCase.toLocaleLowerCase() == 'upper' ? ctrlVal.toUpperCase() : ctrlVal.toLowerCase() : ctrlVal;
                    if (isCaseTransformEnabled && transformedVal == ctrlVal) {
                        isCaseTransformEnabled = false;
                    }
                    else {
                        ctrlVal = transformedVal;
                    }
                    val += ctrlVal;
                    if (isLengthExceed || isCaseTransformEnabled) {
                        _this.otpForm.controls[k].setValue(ctrlVal);
                    }
                }
            });
            this.onInputChange.emit(val);
        };
        NgOtpInputComponent.prototype.getInputType = function () {
            return this.config.isPasswordInput
                ? 'password'
                : this.config.allowNumbersOnly
                    ? 'tel'
                    : 'text';
        };
        NgOtpInputComponent.prototype.handlePaste = function (e) {
            // Get pasted data via clipboard API
            var clipboardData = e.clipboardData || window['clipboardData'];
            if (clipboardData) {
                var pastedData = clipboardData.getData('Text');
            }
            // Stop data actually being pasted into div
            e.stopPropagation();
            e.preventDefault();
            if (!pastedData) {
                return;
            }
            this.setValue(pastedData);
        };
NgOtpInputComponent.ɵfac = function NgOtpInputComponent_Factory(t) { return new (t || NgOtpInputComponent)(ɵngcc0.ɵɵdirectiveInject(KeysPipe)); };
NgOtpInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgOtpInputComponent, selectors: [["ng-otp-input"]], inputs: { config: "config" }, outputs: { onInputChange: "onInputChange" }, decls: 1, vars: 1, consts: [[3, "class", "id", "ngStyle", 4, "ngIf"], [3, "id", "ngStyle"], ["numberOnly", "", "autocomplete", "one-time-code", 3, "pattern", "type", "placeholder", "disabledNumberOnly", "ngStyle", "class", "formControl", "id", "keydown", "keyup", 4, "ngFor", "ngForOf"], ["numberOnly", "", "autocomplete", "one-time-code", 3, "pattern", "type", "placeholder", "disabledNumberOnly", "ngStyle", "formControl", "id", "keydown", "keyup"]], template: function NgOtpInputComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, NgOtpInputComponent_div_0_Template, 3, 8, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.otpForm == null ? null : ctx.otpForm.controls);
    } }, directives: function () { return [ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc1.NgForOf, ɵngcc2.DefaultValueAccessor, NumberOnlyDirective, ɵngcc2.PatternValidator, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective]; }, pipes: function () { return [KeysPipe]; }, styles: [".otp-input[_ngcontent-%COMP%]{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.wrapper[_ngcontent-%COMP%]   .otp-input[_ngcontent-%COMP%]:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input[_ngcontent-%COMP%]{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input[_ngcontent-%COMP%]{width:30px;font-size:18px;height:30px}}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgOtpInputComponent, [{
        type: core.Component,
        args: [{
                // tslint:disable-next-line: component-selector
                selector: 'ng-otp-input',
                template: "<div class=\"wrapper {{config.containerClass}}\" id=\"c_{{componentKey}}\" *ngIf=\"otpForm?.controls\"\r\n  [ngStyle]=\"config.containerStyles\">\r\n  <input [pattern]=\"config.allowNumbersOnly ? '\\\\d*' : ''\" [type]=\"inputType\" numberOnly [placeholder]=\"config?.placeholder || ''\"\r\n    [disabledNumberOnly]=\"!config.allowNumbersOnly\" [ngStyle]=\"config.inputStyles\" \r\n    class=\"otp-input {{config.inputClass}}\" autocomplete=\"one-time-code\" *ngFor=\"let item of otpForm?.controls | keys;let i=index\"\r\n    [formControl]=\"otpForm.controls[item]\" id=\"otp_{{i}}_{{componentKey}}\" (keydown)=\"onKeyDown($event)\"\r\n    (keyup)=\"onKeyUp($event,i)\">\r\n</div>",
                styles: [".otp-input{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input{width:30px;font-size:18px;height:30px}}\n"]
            }]
    }], function () { return [{ type: KeysPipe }]; }, { config: [{
            type: core.Input
        }], onInputChange: [{
            type: core.Output
        }] }); })();
        return NgOtpInputComponent;
    }());
    /**
     * @type {function(): !Array<(null|{
     *   type: ?,
     *   decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>),
     * })>}
     * @nocollapse
     */
    NgOtpInputComponent.ctorParameters = function () { return [
        { type: KeysPipe }
    ]; };
    /** @type {!Object<string, !Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    NgOtpInputComponent.propDecorators = {
        config: [{ type: core.Input }],
        onInputChange: [{ type: core.Output }]
    };

    var NumberOnlyDirective = /** @class */ (function () {
        function NumberOnlyDirective(_elRef, _renderer) {
            this._elRef = _elRef;
            this._renderer = _renderer;
        }
        NumberOnlyDirective.prototype.ngOnInit = function () {
            if (!this.disabledNumberOnly) {
                this._renderer.setAttribute(this._elRef.nativeElement, 'onkeypress', 'return (event.charCode >= 48 && event.charCode <= 57) || event.charCode == 0');
            }
        };
NumberOnlyDirective.ɵfac = function NumberOnlyDirective_Factory(t) { return new (t || NumberOnlyDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
NumberOnlyDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NumberOnlyDirective, selectors: [["", "numberOnly", ""]], inputs: { disabledNumberOnly: "disabledNumberOnly" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NumberOnlyDirective, [{
        type: core.Directive,
        args: [{
                selector: '[numberOnly]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { disabledNumberOnly: [{
            type: core.Input
        }] }); })();
        return NumberOnlyDirective;
    }());
    /**
     * @type {function(): !Array<(null|{
     *   type: ?,
     *   decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>),
     * })>}
     * @nocollapse
     */
    NumberOnlyDirective.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.Renderer2 }
    ]; };
    /** @type {!Object<string, !Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    NumberOnlyDirective.propDecorators = {
        disabledNumberOnly: [{ type: core.Input }]
    };

    var NgOtpInputModule = /** @class */ (function () {
        function NgOtpInputModule() {
        }
NgOtpInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgOtpInputModule });
NgOtpInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgOtpInputModule_Factory(t) { return new (t || NgOtpInputModule)(); }, providers: [KeysPipe], imports: [[
            common.CommonModule,
            forms.FormsModule,
            forms.ReactiveFormsModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgOtpInputModule, { declarations: [NgOtpInputComponent,
        KeysPipe,
        NumberOnlyDirective], imports: [ɵngcc1.CommonModule, ɵngcc2.FormsModule, ɵngcc2.ReactiveFormsModule], exports: [NgOtpInputComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgOtpInputModule, [{
        type: core.NgModule,
        args: [{
                imports: [
                    common.CommonModule,
                    forms.FormsModule,
                    forms.ReactiveFormsModule
                ],
                declarations: [NgOtpInputComponent, KeysPipe, NumberOnlyDirective],
                exports: [NgOtpInputComponent],
                providers: [KeysPipe]
            }]
    }], function () { return []; }, null); })();
        return NgOtpInputModule;
    }());

    /*
     * Public API Surface of ng-otp-input
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgOtpInputComponent = NgOtpInputComponent;
    exports.NgOtpInputModule = NgOtpInputModule;
    exports.ɵa = KeysPipe;
    exports.ɵb = NumberOnlyDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ng-otp-input.umd.js.map