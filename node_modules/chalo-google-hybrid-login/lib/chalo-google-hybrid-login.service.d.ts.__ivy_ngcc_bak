import { GoogleLoginConfig } from './models/chalo-google-login.config';
import { HttpClient, HttpParams } from '@angular/common/http';
import { ScriptLoadService } from './script-load.service';
import { Observable, Subject } from 'rxjs';
import { CookieService } from 'ngx-cookie-service';
import { GoogleLoginResponse } from './models';
export declare class GoogleLoginService<T> {
    private config;
    private httpHandler;
    private scriptService;
    private cookieService;
    auth2: any;
    authObservable: Observable<boolean | T>;
    userObservable: Observable<boolean | T>;
    private subject;
    loginResponsesubject: Subject<GoogleLoginResponse>;
    constructor(config: GoogleLoginConfig, httpHandler: HttpClient, scriptService: ScriptLoadService, cookieService: CookieService);
    getGoogleLogin(): Observable<boolean | T>;
    getUserDetails(): Observable<Object>;
    getToken(): Observable<boolean | T>;
    setGoogleLoginResponse(googleResponse: any): void;
    getGoogleLoginResponse(): Observable<GoogleLoginResponse>;
    isUserAuthenticated(): boolean;
    getUserCookieValue(): string;
    sendAuthorization(token: any): Observable<Object>;
    getUserToken(userCredential: any): Observable<any>;
    getUserTokenFromRefreshToken(refreshToken: any): Observable<any>;
    private getTokenFromServer(data);
    private getEncodedData(data);
    logoutUser(): Observable<string>;
    updateUserState(): void;
    sendLogoutMessage(msg: string): void;
    getLogoutMessage(): Observable<any>;
    encryptCookie(stringToEncrypt: any): any;
    decryptString(encryptedString: any): any;
    getUserCookie(): any;
    sendOtp(number: any): Observable<Object>;
    validateUser(body: any): Observable<Object>;
    validateOtp(otp: any, number: any): Observable<Object>;
    getMobileToken(otp: any, number: any): Observable<boolean | T>;
    getURLSearchParams(): HttpParams;
    setCookieData(data: any): void;
}
