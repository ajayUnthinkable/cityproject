/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { InjectionToken, Optional, Inject, Injectable } from "@angular/core";
import { CookieService } from "ngx-cookie-service";
import { GoogleLoginService } from "../chalo-google-hybrid-login.service";
import { GOOGLE_LOGIN_CONFIG } from "./chalo-google-login.config";
/** @type {?} */
export const GOOGLE_LOGIN_HTTP_INTERCEPTOR = new InjectionToken('chalo-google-login.interceptor');
export class GoogleAuthHttpInterceptor {
    /**
     * @param {?} googleLoginInterceptor
     * @param {?} cookieService
     * @param {?} googleLoginService
     * @param {?} config
     */
    constructor(googleLoginInterceptor, cookieService, googleLoginService, config) {
        this.googleLoginInterceptor = googleLoginInterceptor;
        this.cookieService = cookieService;
        this.googleLoginService = googleLoginService;
        this.config = config;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        if (!(req.url.includes('token') || req.url.includes('authenticated') || req.url.includes('Otp') || req.url.includes('logout')) && this.cookieService.check(this.config.user.loginStateCookie)) {
            /** @type {?} */
            const loginCookie = this.cookieService.get(this.config.user.loginStateCookie);
            if (loginCookie) {
                /** @type {?} */
                var decryptLoginCookie = this.googleLoginService.decryptString(loginCookie);
                if (decryptLoginCookie && decryptLoginCookie === 'loggedOut') {
                    this.googleLoginService.sendLogoutMessage('Signed out');
                }
            }
        }
        if (this.googleLoginInterceptor) {
            return this.googleLoginInterceptor.intercept(req, next);
        }
        else {
            return next.handle(req);
        }
    }
}
GoogleAuthHttpInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
GoogleAuthHttpInterceptor.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [GOOGLE_LOGIN_HTTP_INTERCEPTOR,] }] },
    { type: CookieService },
    { type: GoogleLoginService },
    { type: undefined, decorators: [{ type: Inject, args: [GOOGLE_LOGIN_CONFIG,] }] }
];
if (false) {
    /** @type {?} */
    GoogleAuthHttpInterceptor.prototype.googleLoginInterceptor;
    /** @type {?} */
    GoogleAuthHttpInterceptor.prototype.cookieService;
    /** @type {?} */
    GoogleAuthHttpInterceptor.prototype.googleLoginService;
    /** @type {?} */
    GoogleAuthHttpInterceptor.prototype.config;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbG8tZ29vZ2xlLWxvZ2luLXNlcnZpY2UuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jaGFsby1nb29nbGUtaHlicmlkLWxvZ2luLyIsInNvdXJjZXMiOlsibGliL21vZGVscy9jaGFsby1nb29nbGUtbG9naW4tc2VydmljZS5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbkQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDMUUsT0FBTyxFQUFxQixtQkFBbUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDOztBQUNyRixhQUFhLDZCQUE2QixHQUFHLElBQUksY0FBYyxDQUFrQixnQ0FBZ0MsQ0FBQyxDQUFDO0FBR25ILE1BQU07Ozs7Ozs7SUFFSixZQUF1RSxzQkFBdUMsRUFDcEcsZUFBc0Msa0JBQTJDLEVBQXVDLE1BQXlCO1FBRHBGLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBaUI7UUFDcEcsa0JBQWEsR0FBYixhQUFhO1FBQXlCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBeUI7UUFBdUMsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7S0FFMUo7Ozs7OztJQUVELFNBQVMsQ0FBQyxHQUFxQixFQUFFLElBQWlCO1FBQ2hELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDOztZQUM5TCxNQUFNLFdBQVcsR0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO1lBQzNFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7O2dCQUNoQixJQUFJLGtCQUFrQixHQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQzFFLEVBQUUsQ0FBQSxDQUFDLGtCQUFrQixJQUFJLGtCQUFrQixLQUFHLFdBQVcsQ0FBQyxDQUFBLENBQUM7b0JBQ3pELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztpQkFDekQ7YUFDRjtTQUNGO1FBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQztZQUNoQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUE7U0FDeEQ7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3pCO0tBQ0Y7OztZQXZCRixVQUFVOzs7OzRDQUdJLFFBQVEsWUFBSSxNQUFNLFNBQUMsNkJBQTZCO1lBUnRELGFBQWE7WUFDYixrQkFBa0I7NENBUW9FLE1BQU0sU0FBQyxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwSW50ZXJjZXB0b3IsIEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XG5pbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgT3B0aW9uYWwsIEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IENvb2tpZVNlcnZpY2UgfSBmcm9tIFwibmd4LWNvb2tpZS1zZXJ2aWNlXCI7XG5pbXBvcnQgeyBHb29nbGVMb2dpblNlcnZpY2UgfSBmcm9tIFwiLi4vY2hhbG8tZ29vZ2xlLWh5YnJpZC1sb2dpbi5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBHb29nbGVMb2dpbkNvbmZpZywgR09PR0xFX0xPR0lOX0NPTkZJRyB9IGZyb20gXCIuL2NoYWxvLWdvb2dsZS1sb2dpbi5jb25maWdcIjtcbmV4cG9ydCBjb25zdCBHT09HTEVfTE9HSU5fSFRUUF9JTlRFUkNFUFRPUiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxIdHRwSW50ZXJjZXB0b3I+KCdjaGFsby1nb29nbGUtbG9naW4uaW50ZXJjZXB0b3InKTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEdvb2dsZUF1dGhIdHRwSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoR09PR0xFX0xPR0lOX0hUVFBfSU5URVJDRVBUT1IpIHByaXZhdGUgZ29vZ2xlTG9naW5JbnRlcmNlcHRvcjogSHR0cEludGVyY2VwdG9yLFxuICAgIHByaXZhdGUgY29va2llU2VydmljZTogQ29va2llU2VydmljZSwgcHJpdmF0ZSBnb29nbGVMb2dpblNlcnZpY2U6IEdvb2dsZUxvZ2luU2VydmljZTxhbnk+LEBJbmplY3QoR09PR0xFX0xPR0lOX0NPTkZJRykgIHByaXZhdGUgY29uZmlnIDpHb29nbGVMb2dpbkNvbmZpZykge1xuXG4gIH1cblxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICBpZiAoIShyZXEudXJsLmluY2x1ZGVzKCd0b2tlbicpIHx8IHJlcS51cmwuaW5jbHVkZXMoJ2F1dGhlbnRpY2F0ZWQnKSB8fCByZXEudXJsLmluY2x1ZGVzKCdPdHAnKSB8fCByZXEudXJsLmluY2x1ZGVzKCdsb2dvdXQnKSkgJiYgdGhpcy5jb29raWVTZXJ2aWNlLmNoZWNrKHRoaXMuY29uZmlnLnVzZXIubG9naW5TdGF0ZUNvb2tpZSkpIHtcbiAgICAgIGNvbnN0IGxvZ2luQ29va2llPXRoaXMuY29va2llU2VydmljZS5nZXQodGhpcy5jb25maWcudXNlci5sb2dpblN0YXRlQ29va2llKVxuICAgICAgaWYgKGxvZ2luQ29va2llKSB7XG4gICAgICAgIHZhciBkZWNyeXB0TG9naW5Db29raWU9dGhpcy5nb29nbGVMb2dpblNlcnZpY2UuZGVjcnlwdFN0cmluZyhsb2dpbkNvb2tpZSk7XG4gICAgICAgIGlmKGRlY3J5cHRMb2dpbkNvb2tpZSAmJiBkZWNyeXB0TG9naW5Db29raWU9PT0nbG9nZ2VkT3V0Jyl7XG4gICAgICAgICAgdGhpcy5nb29nbGVMb2dpblNlcnZpY2Uuc2VuZExvZ291dE1lc3NhZ2UoJ1NpZ25lZCBvdXQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5nb29nbGVMb2dpbkludGVyY2VwdG9yKSB7XG4gICAgICByZXR1cm4gdGhpcy5nb29nbGVMb2dpbkludGVyY2VwdG9yLmludGVyY2VwdChyZXEsIG5leHQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpO1xuICAgIH1cbiAgfVxuXG5cbn1cbiJdfQ==