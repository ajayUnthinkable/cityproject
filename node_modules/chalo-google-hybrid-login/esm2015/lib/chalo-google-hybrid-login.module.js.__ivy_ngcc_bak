/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { ChaloGoogleHybridLoginComponent } from './chalo-google-hybrid-login.component';
import { HttpClientModule } from "@angular/common/http";
import { GoogleLoginService } from "./chalo-google-hybrid-login.service";
import { HTTP_INTERCEPTORS } from "@angular/common/http";
import { GoogleAuthHttpInterceptor } from "./models/chalo-google-login-service.interceptor";
import { ScriptLoadService } from './script-load.service';
import { CommonModule } from '@angular/common';
import { CookieService } from 'ngx-cookie-service';
import { MobieLoginComponent } from './mobie-login/mobie-login.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatInputModule } from '@angular/material/input';
import { MatFormFieldModule } from '@angular/material/form-field';
import { NumberDirective } from './directives/number.directive';
import { NgOtpInputModule } from 'ng-otp-input';
import { UserLoginComponent } from './user-login/user-login.component';
export class ChaloGoogleHybridLoginModule {
}
ChaloGoogleHybridLoginModule.decorators = [
    { type: NgModule, args: [{
                imports: [HttpClientModule, CommonModule, FormsModule, ReactiveFormsModule,
                    MatFormFieldModule, MatInputModule, NgOtpInputModule
                ],
                declarations: [ChaloGoogleHybridLoginComponent, MobieLoginComponent, NumberDirective, UserLoginComponent],
                exports: [ChaloGoogleHybridLoginComponent],
                providers: [GoogleLoginService, ScriptLoadService, CookieService,
                    { provide: HTTP_INTERCEPTORS, useClass: GoogleAuthHttpInterceptor, multi: true }],
            },] }
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbG8tZ29vZ2xlLWh5YnJpZC1sb2dpbi5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jaGFsby1nb29nbGUtaHlicmlkLWxvZ2luLyIsInNvdXJjZXMiOlsibGliL2NoYWxvLWdvb2dsZS1oeWJyaWQtbG9naW4ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3hGLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3RELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLHFDQUFxQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3ZELE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLGlEQUFpRCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDMUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQTtBQUN0RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU8sY0FBYyxDQUFDO0FBQ2pELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBWXZFLE1BQU07OztZQVZMLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBQyxZQUFZLEVBQUMsV0FBVyxFQUFDLG1CQUFtQjtvQkFDckUsa0JBQWtCLEVBQUMsY0FBYyxFQUFFLGdCQUFnQjtpQkFDcEQ7Z0JBQ0QsWUFBWSxFQUFFLENBQUMsK0JBQStCLEVBQUUsbUJBQW1CLEVBQUMsZUFBZSxFQUFFLGtCQUFrQixDQUFDO2dCQUN4RyxPQUFPLEVBQUUsQ0FBQywrQkFBK0IsQ0FBQztnQkFDMUMsU0FBUyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsaUJBQWlCLEVBQUMsYUFBYTtvQkFDN0QsRUFBQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLHlCQUF5QixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUMsQ0FBQzthQUVsRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDaGFsb0dvb2dsZUh5YnJpZExvZ2luQ29tcG9uZW50IH0gZnJvbSAnLi9jaGFsby1nb29nbGUtaHlicmlkLWxvZ2luLmNvbXBvbmVudCc7XG5pbXBvcnQge0h0dHBDbGllbnRNb2R1bGV9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xuaW1wb3J0IHtHb29nbGVMb2dpblNlcnZpY2V9IGZyb20gXCIuL2NoYWxvLWdvb2dsZS1oeWJyaWQtbG9naW4uc2VydmljZVwiO1xuaW1wb3J0IHtIVFRQX0lOVEVSQ0VQVE9SU30gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XG5pbXBvcnQge0dvb2dsZUF1dGhIdHRwSW50ZXJjZXB0b3J9IGZyb20gXCIuL21vZGVscy9jaGFsby1nb29nbGUtbG9naW4tc2VydmljZS5pbnRlcmNlcHRvclwiO1xuaW1wb3J0IHsgU2NyaXB0TG9hZFNlcnZpY2UgfSBmcm9tICcuL3NjcmlwdC1sb2FkLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IENvb2tpZVNlcnZpY2UgfSBmcm9tICduZ3gtY29va2llLXNlcnZpY2UnO1xuaW1wb3J0IHsgTW9iaWVMb2dpbkNvbXBvbmVudCB9IGZyb20gJy4vbW9iaWUtbG9naW4vbW9iaWUtbG9naW4uY29tcG9uZW50JztcbmltcG9ydCB7IEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtNYXRJbnB1dE1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvaW5wdXQnXG5pbXBvcnQgeyBNYXRGb3JtRmllbGRNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9mb3JtLWZpZWxkJztcbmltcG9ydCB7IE51bWJlckRpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9udW1iZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IE5nT3RwSW5wdXRNb2R1bGUgfSBmcm9tICAnbmctb3RwLWlucHV0JztcbmltcG9ydCB7IFVzZXJMb2dpbkNvbXBvbmVudCB9IGZyb20gJy4vdXNlci1sb2dpbi91c2VyLWxvZ2luLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtIdHRwQ2xpZW50TW9kdWxlLENvbW1vbk1vZHVsZSxGb3Jtc01vZHVsZSxSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgIE1hdEZvcm1GaWVsZE1vZHVsZSxNYXRJbnB1dE1vZHVsZSwgTmdPdHBJbnB1dE1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtDaGFsb0dvb2dsZUh5YnJpZExvZ2luQ29tcG9uZW50LCBNb2JpZUxvZ2luQ29tcG9uZW50LE51bWJlckRpcmVjdGl2ZSwgVXNlckxvZ2luQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW0NoYWxvR29vZ2xlSHlicmlkTG9naW5Db21wb25lbnRdLFxuICBwcm92aWRlcnM6IFtHb29nbGVMb2dpblNlcnZpY2UsIFNjcmlwdExvYWRTZXJ2aWNlLENvb2tpZVNlcnZpY2UsXG4gICAge3Byb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLCB1c2VDbGFzczogR29vZ2xlQXV0aEh0dHBJbnRlcmNlcHRvciwgbXVsdGk6IHRydWV9XSxcblxufSlcbmV4cG9ydCBjbGFzcyBDaGFsb0dvb2dsZUh5YnJpZExvZ2luTW9kdWxlIHsgfVxuIl19