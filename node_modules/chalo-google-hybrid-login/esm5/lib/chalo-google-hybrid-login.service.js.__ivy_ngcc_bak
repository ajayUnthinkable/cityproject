/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { GOOGLE_LOGIN_CONFIG } from './models/chalo-google-login.config';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { ScriptLoadService } from './script-load.service';
import { Observable, Subject } from 'rxjs';
import { CookieService } from 'ngx-cookie-service';
import CryptoJS from 'crypto-js';
/**
 * @template T
 */
var GoogleLoginService = /** @class */ (function () {
    function GoogleLoginService(config, httpHandler, scriptService, cookieService) {
        var _this = this;
        this.config = config;
        this.httpHandler = httpHandler;
        this.scriptService = scriptService;
        this.cookieService = cookieService;
        this.subject = new Subject();
        this.loginResponsesubject = new Subject();
        this.scriptService.loadScript('https://apis.google.com/js/client:platform.js').subscribe(function (data) {
            try {
                gapi.load('client', function () {
                    _this.auth2 = gapi.auth2.init({
                        client_id: _this.config.auth.google.client_id,
                        scope: 'profile'
                    });
                });
            }
            catch (err) {
                console.log('error in initializing auth');
            }
        }, function (err) {
            console.log('erro', err);
        });
    }
    /**
     * @return {?}
     */
    GoogleLoginService.prototype.getGoogleLogin = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this.authObservable = new Observable(function (observer) {
            if (!_this.auth2) {
                observer.error('Auth instance is not defined');
            }
            else {
                _this.auth2.grantOfflineAccess().then(function (res) {
                    _this.sendAuthorization(res.code).subscribe(function (data) {
                        _this.getUserToken(data).subscribe(function (d) {
                            _this.setCookieData(data);
                            observer.next(d);
                            observer.complete();
                        }, function (err) {
                            observer.error(err);
                        });
                    }, function (err) {
                        observer.error(err);
                    });
                });
            }
        });
    };
    /**
     * @return {?}
     */
    GoogleLoginService.prototype.getUserDetails = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var user = this.getUserCookieValue();
        /** @type {?} */
        var url = this.config.user.authenticateUserUrl;
        url = url + "?userId=" + encodeURIComponent(user);
        return this.httpHandler.get(url);
    };
    /**
     * @return {?}
     */
    GoogleLoginService.prototype.getToken = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this.userObservable = new Observable(function (observer) {
            _this.getUserDetails().subscribe(function (userDetails) {
                _this.getUserToken(userDetails).subscribe(function (d) {
                    observer.next(d);
                    observer.complete();
                }, function (err) {
                    observer.error(err);
                });
            }, function (err) {
                observer.error(err);
            });
        });
    };
    /**
     * @param {?} googleResponse
     * @return {?}
     */
    GoogleLoginService.prototype.setGoogleLoginResponse = /**
     * @param {?} googleResponse
     * @return {?}
     */
    function (googleResponse) {
        this.loginResponsesubject.next(googleResponse);
    };
    /**
     * @return {?}
     */
    GoogleLoginService.prototype.getGoogleLoginResponse = /**
     * @return {?}
     */
    function () {
        return this.loginResponsesubject.asObservable();
    };
    /**
     * @return {?}
     */
    GoogleLoginService.prototype.isUserAuthenticated = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var userCookie = this.getUserCookieValue();
        if (userCookie) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @return {?}
     */
    GoogleLoginService.prototype.getUserCookieValue = /**
     * @return {?}
     */
    function () {
        return this.cookieService.get(this.config.user.userCookie);
    };
    /**
     * @param {?} token
     * @return {?}
     */
    GoogleLoginService.prototype.sendAuthorization = /**
     * @param {?} token
     * @return {?}
     */
    function (token) {
        /** @type {?} */
        var url = this.config.authCodeUrl;
        /** @type {?} */
        var headerToken = {
            key: 'auth-code',
            value: token
        };
        /** @type {?} */
        var headers = new HttpHeaders({ 'auth-code': headerToken.value });
        /** @type {?} */
        var options = { headers: headers };
        return this.httpHandler.post(url, null, options);
    };
    /**
     * @param {?} userCredential
     * @return {?}
     */
    GoogleLoginService.prototype.getUserToken = /**
     * @param {?} userCredential
     * @return {?}
     */
    function (userCredential) {
        /** @type {?} */
        var data = {
            username: userCredential.username,
            password: userCredential.password,
            grant_type: 'password'
        };
        return this.getTokenFromServer(data);
    };
    /**
     * @param {?} refreshToken
     * @return {?}
     */
    GoogleLoginService.prototype.getUserTokenFromRefreshToken = /**
     * @param {?} refreshToken
     * @return {?}
     */
    function (refreshToken) {
        /** @type {?} */
        var data = {
            refresh_token: refreshToken,
            grant_type: 'refresh_token'
        };
        return this.getTokenFromServer(data);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    GoogleLoginService.prototype.getTokenFromServer = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var url = this.config.userTokenServerUrl;
        /** @type {?} */
        var urlEncodedData = this.getEncodedData(data);
        /** @type {?} */
        var headerToken = {
            key: 'Authorization',
            value: 'Basic ' + btoa(this.config.auth.server.client_id + ":" + this.config.auth.server.client_secret)
        };
        /** @type {?} */
        var headers = new HttpHeaders({ Authorization: headerToken.value }).set('Content-Type', 'application/x-www-form-urlencoded');
        /** @type {?} */
        var options = { headers: headers };
        return this.httpHandler.post(url, urlEncodedData, options);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    GoogleLoginService.prototype.getEncodedData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var urlEncodedDataPairs = [];
        for (var name_1 in data) {
            if (data.hasOwnProperty(name_1)) {
                urlEncodedDataPairs.push(encodeURIComponent(name_1) + '=' + encodeURIComponent(data[name_1]));
            }
        }
        /** @type {?} */
        var urlEncodedData = urlEncodedDataPairs.join('&').replace(/%20/g, '+');
        return urlEncodedData;
    };
    /**
     * @return {?}
     */
    GoogleLoginService.prototype.logoutUser = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var userCookie = this.getUserCookieValue();
        /** @type {?} */
        var url = "" + this.config.logout.logoutUrl;
        if (userCookie) {
            this.cookieService.delete(this.config.user.userCookie, '/', '.chalo.com');
            url = url + "?userId=" + userCookie;
        }
        return this.httpHandler.post(url, {}, { responseType: 'text' });
    };
    /**
     * @return {?}
     */
    GoogleLoginService.prototype.updateUserState = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var userCookie = this.getUserCookieValue();
        // this.cookieService.set(this.config.user.loginStateCookie, this.encryptCookie('loggedOut'), 7, '/', null, false, 'Lax')
        this.cookieService.set(this.config.user.loginStateCookie, this.encryptCookie('loggedOut'), 7, '/', '.chalo.com', false, 'Lax');
        if (userCookie) {
            // this.cookieService.delete(this.config.user.userCookie, '/');
            this.cookieService.delete(this.config.user.userCookie, '/', '.chalo.com');
        }
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    GoogleLoginService.prototype.sendLogoutMessage = /**
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        this.subject.next({ message: msg });
    };
    /**
     * @return {?}
     */
    GoogleLoginService.prototype.getLogoutMessage = /**
     * @return {?}
     */
    function () {
        return this.subject.asObservable();
    };
    /**
     * @param {?} stringToEncrypt
     * @return {?}
     */
    GoogleLoginService.prototype.encryptCookie = /**
     * @param {?} stringToEncrypt
     * @return {?}
     */
    function (stringToEncrypt) {
        /** @type {?} */
        var key = CryptoJS.enc.Utf8.parse('web_chalo_appkey');
        /** @type {?} */
        var encryptedString = CryptoJS.AES.encrypt(stringToEncrypt, key, {
            mode: CryptoJS.mode.ECB,
            padding: CryptoJS.pad.ZeroPadding
        });
        return encryptedString.toString();
    };
    /**
     * @param {?} encryptedString
     * @return {?}
     */
    GoogleLoginService.prototype.decryptString = /**
     * @param {?} encryptedString
     * @return {?}
     */
    function (encryptedString) {
        /** @type {?} */
        var key = CryptoJS.enc.Utf8.parse('web_chalo_appkey');
        /** @type {?} */
        var decrypted = CryptoJS.AES.decrypt(encryptedString, key, {
            mode: CryptoJS.mode.ECB,
            padding: CryptoJS.pad.ZeroPadding
        });
        return decrypted.toString(CryptoJS.enc.Utf8);
    };
    /**
     * @return {?}
     */
    GoogleLoginService.prototype.getUserCookie = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var encryptedCookie = this.getUserCookieValue();
        /** @type {?} */
        var decryptedUserCookie;
        if (encryptedCookie)
            decryptedUserCookie = this.decryptString(encryptedCookie);
        return decryptedUserCookie;
    };
    /**
     * @param {?} number
     * @return {?}
     */
    GoogleLoginService.prototype.sendOtp = /**
     * @param {?} number
     * @return {?}
     */
    function (number) {
        /** @type {?} */
        var url = "" + this.config.sendOtpUrl;
        return this.httpHandler.post(url, { "number": number });
    };
    /**
     * @param {?} body
     * @return {?}
     */
    GoogleLoginService.prototype.validateUser = /**
     * @param {?} body
     * @return {?}
     */
    function (body) {
        /** @type {?} */
        var url = "" + this.config.validateUserUrl;
        return this.httpHandler.post(url, body);
    };
    /**
     * @param {?} otp
     * @param {?} number
     * @return {?}
     */
    GoogleLoginService.prototype.validateOtp = /**
     * @param {?} otp
     * @param {?} number
     * @return {?}
     */
    function (otp, number) {
        /** @type {?} */
        var url = "" + this.config.validateOtpUrl;
        /** @type {?} */
        var params = this.getURLSearchParams()
            .set("otp", otp)
            .set("mobile", number);
        return this.httpHandler.get(url, { params: params });
    };
    /**
     * @param {?} otp
     * @param {?} number
     * @return {?}
     */
    GoogleLoginService.prototype.getMobileToken = /**
     * @param {?} otp
     * @param {?} number
     * @return {?}
     */
    function (otp, number) {
        var _this = this;
        return this.userObservable = new Observable(function (observer) {
            _this.validateOtp(otp, number).subscribe(function (userDetails) {
                _this.getUserToken(userDetails).subscribe(function (d) {
                    _this.setCookieData(userDetails);
                    observer.next(d);
                    observer.complete();
                }, function (err) {
                    observer.error(err);
                });
            }, function (err) {
                observer.error(err);
            });
        });
    };
    /**
     * @return {?}
     */
    GoogleLoginService.prototype.getURLSearchParams = /**
     * @return {?}
     */
    function () {
        return new HttpParams();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    GoogleLoginService.prototype.setCookieData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data['userId']) {
            /** @type {?} */
            var encryptedString = this.encryptCookie(data['userId']);
            this.cookieService.set(this.config.user.userCookie, encryptedString, 7, '/', '.chalo.com', false, 'Lax');
            // this.cookieService.set(this.config.user.userCookie, encryptedString, 7, '/', null, false, 'Lax');
        }
        this.cookieService.set(this.config.user.loginStateCookie, this.encryptCookie('loggedIn'), 7, '/', '.chalo.com', false, 'Lax');
        // this.cookieService.set(this.config.user.loginStateCookie, this.encryptCookie('loggedIn'), 7, '/', null, false, 'Lax')
    };
    GoogleLoginService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    GoogleLoginService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [GOOGLE_LOGIN_CONFIG,] }] },
        { type: HttpClient },
        { type: ScriptLoadService },
        { type: CookieService }
    ]; };
    return GoogleLoginService;
}());
export { GoogleLoginService };
if (false) {
    /** @type {?} */
    GoogleLoginService.prototype.auth2;
    /** @type {?} */
    GoogleLoginService.prototype.authObservable;
    /** @type {?} */
    GoogleLoginService.prototype.userObservable;
    /** @type {?} */
    GoogleLoginService.prototype.subject;
    /** @type {?} */
    GoogleLoginService.prototype.loginResponsesubject;
    /** @type {?} */
    GoogleLoginService.prototype.config;
    /** @type {?} */
    GoogleLoginService.prototype.httpHandler;
    /** @type {?} */
    GoogleLoginService.prototype.scriptService;
    /** @type {?} */
    GoogleLoginService.prototype.cookieService;
}

//# sourceMappingURL=data:application/json;base64,