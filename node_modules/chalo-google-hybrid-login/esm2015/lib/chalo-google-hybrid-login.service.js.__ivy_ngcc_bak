/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { GOOGLE_LOGIN_CONFIG } from './models/chalo-google-login.config';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { ScriptLoadService } from './script-load.service';
import { Observable, Subject } from 'rxjs';
import { CookieService } from 'ngx-cookie-service';
import CryptoJS from 'crypto-js';
/**
 * @template T
 */
export class GoogleLoginService {
    /**
     * @param {?} config
     * @param {?} httpHandler
     * @param {?} scriptService
     * @param {?} cookieService
     */
    constructor(config, httpHandler, scriptService, cookieService) {
        this.config = config;
        this.httpHandler = httpHandler;
        this.scriptService = scriptService;
        this.cookieService = cookieService;
        this.subject = new Subject();
        this.loginResponsesubject = new Subject();
        this.scriptService.loadScript('https://apis.google.com/js/client:platform.js').subscribe((data) => {
            try {
                gapi.load('client', () => {
                    this.auth2 = gapi.auth2.init({
                        client_id: this.config.auth.google.client_id,
                        scope: 'profile'
                    });
                });
            }
            catch (err) {
                console.log('error in initializing auth');
            }
        }, err => {
            console.log('erro', err);
        });
    }
    /**
     * @return {?}
     */
    getGoogleLogin() {
        return this.authObservable = new Observable((observer) => {
            if (!this.auth2) {
                observer.error('Auth instance is not defined');
            }
            else {
                this.auth2.grantOfflineAccess().then((res) => {
                    this.sendAuthorization(res.code).subscribe((data) => {
                        this.getUserToken(data).subscribe((d) => {
                            this.setCookieData(data);
                            observer.next(d);
                            observer.complete();
                        }, (err) => {
                            observer.error(err);
                        });
                    }, (err) => {
                        observer.error(err);
                    });
                });
            }
        });
    }
    /**
     * @return {?}
     */
    getUserDetails() {
        /** @type {?} */
        let user = this.getUserCookieValue();
        /** @type {?} */
        var url = this.config.user.authenticateUserUrl;
        url = `${url}?userId=${encodeURIComponent(user)}`;
        return this.httpHandler.get(url);
    }
    /**
     * @return {?}
     */
    getToken() {
        return this.userObservable = new Observable((observer) => {
            this.getUserDetails().subscribe((userDetails) => {
                this.getUserToken(userDetails).subscribe((d) => {
                    observer.next(d);
                    observer.complete();
                }, (err) => {
                    observer.error(err);
                });
            }, (err) => {
                observer.error(err);
            });
        });
    }
    /**
     * @param {?} googleResponse
     * @return {?}
     */
    setGoogleLoginResponse(googleResponse) {
        this.loginResponsesubject.next(googleResponse);
    }
    /**
     * @return {?}
     */
    getGoogleLoginResponse() {
        return this.loginResponsesubject.asObservable();
    }
    /**
     * @return {?}
     */
    isUserAuthenticated() {
        /** @type {?} */
        let userCookie = this.getUserCookieValue();
        if (userCookie) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @return {?}
     */
    getUserCookieValue() {
        return this.cookieService.get(this.config.user.userCookie);
    }
    /**
     * @param {?} token
     * @return {?}
     */
    sendAuthorization(token) {
        /** @type {?} */
        const url = this.config.authCodeUrl;
        /** @type {?} */
        const headerToken = {
            key: 'auth-code',
            value: token
        };
        /** @type {?} */
        const headers = new HttpHeaders({ 'auth-code': headerToken.value });
        /** @type {?} */
        const options = { headers };
        return this.httpHandler.post(url, null, options);
    }
    /**
     * @param {?} userCredential
     * @return {?}
     */
    getUserToken(userCredential) {
        /** @type {?} */
        const data = {
            username: userCredential.username,
            password: userCredential.password,
            grant_type: 'password'
        };
        return this.getTokenFromServer(data);
    }
    /**
     * @param {?} refreshToken
     * @return {?}
     */
    getUserTokenFromRefreshToken(refreshToken) {
        /** @type {?} */
        const data = {
            refresh_token: refreshToken,
            grant_type: 'refresh_token'
        };
        return this.getTokenFromServer(data);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getTokenFromServer(data) {
        /** @type {?} */
        const url = this.config.userTokenServerUrl;
        /** @type {?} */
        const urlEncodedData = this.getEncodedData(data);
        /** @type {?} */
        const headerToken = {
            key: 'Authorization',
            value: 'Basic ' + btoa(`${this.config.auth.server.client_id}:${this.config.auth.server.client_secret}`)
        };
        /** @type {?} */
        const headers = new HttpHeaders({ Authorization: headerToken.value }).set('Content-Type', 'application/x-www-form-urlencoded');
        /** @type {?} */
        const options = { headers };
        return this.httpHandler.post(url, urlEncodedData, options);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getEncodedData(data) {
        /** @type {?} */
        const urlEncodedDataPairs = [];
        for (const name in data) {
            if (data.hasOwnProperty(name)) {
                urlEncodedDataPairs.push(encodeURIComponent(name) + '=' + encodeURIComponent(data[name]));
            }
        }
        /** @type {?} */
        const urlEncodedData = urlEncodedDataPairs.join('&').replace(/%20/g, '+');
        return urlEncodedData;
    }
    /**
     * @return {?}
     */
    logoutUser() {
        /** @type {?} */
        let userCookie = this.getUserCookieValue();
        /** @type {?} */
        let url = `${this.config.logout.logoutUrl}`;
        if (userCookie) {
            this.cookieService.delete(this.config.user.userCookie, '/', '.chalo.com');
            url = `${url}?userId=${userCookie}`;
        }
        return this.httpHandler.post(url, {}, { responseType: 'text' });
    }
    /**
     * @return {?}
     */
    updateUserState() {
        /** @type {?} */
        let userCookie = this.getUserCookieValue();
        // this.cookieService.set(this.config.user.loginStateCookie, this.encryptCookie('loggedOut'), 7, '/', null, false, 'Lax')
        this.cookieService.set(this.config.user.loginStateCookie, this.encryptCookie('loggedOut'), 7, '/', '.chalo.com', false, 'Lax');
        if (userCookie) {
            // this.cookieService.delete(this.config.user.userCookie, '/');
            this.cookieService.delete(this.config.user.userCookie, '/', '.chalo.com');
        }
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    sendLogoutMessage(msg) {
        this.subject.next({ message: msg });
    }
    /**
     * @return {?}
     */
    getLogoutMessage() {
        return this.subject.asObservable();
    }
    /**
     * @param {?} stringToEncrypt
     * @return {?}
     */
    encryptCookie(stringToEncrypt) {
        /** @type {?} */
        var key = CryptoJS.enc.Utf8.parse('web_chalo_appkey');
        /** @type {?} */
        var encryptedString = CryptoJS.AES.encrypt(stringToEncrypt, key, {
            mode: CryptoJS.mode.ECB,
            padding: CryptoJS.pad.ZeroPadding
        });
        return encryptedString.toString();
    }
    /**
     * @param {?} encryptedString
     * @return {?}
     */
    decryptString(encryptedString) {
        /** @type {?} */
        var key = CryptoJS.enc.Utf8.parse('web_chalo_appkey');
        /** @type {?} */
        var decrypted = CryptoJS.AES.decrypt(encryptedString, key, {
            mode: CryptoJS.mode.ECB,
            padding: CryptoJS.pad.ZeroPadding
        });
        return decrypted.toString(CryptoJS.enc.Utf8);
    }
    /**
     * @return {?}
     */
    getUserCookie() {
        /** @type {?} */
        let encryptedCookie = this.getUserCookieValue();
        /** @type {?} */
        let decryptedUserCookie;
        if (encryptedCookie)
            decryptedUserCookie = this.decryptString(encryptedCookie);
        return decryptedUserCookie;
    }
    /**
     * @param {?} number
     * @return {?}
     */
    sendOtp(number) {
        /** @type {?} */
        let url = `${this.config.sendOtpUrl}`;
        return this.httpHandler.post(url, { "number": number });
    }
    /**
     * @param {?} body
     * @return {?}
     */
    validateUser(body) {
        /** @type {?} */
        let url = `${this.config.validateUserUrl}`;
        return this.httpHandler.post(url, body);
    }
    /**
     * @param {?} otp
     * @param {?} number
     * @return {?}
     */
    validateOtp(otp, number) {
        /** @type {?} */
        let url = `${this.config.validateOtpUrl}`;
        /** @type {?} */
        let params = this.getURLSearchParams()
            .set("otp", otp)
            .set("mobile", number);
        return this.httpHandler.get(url, { params });
    }
    /**
     * @param {?} otp
     * @param {?} number
     * @return {?}
     */
    getMobileToken(otp, number) {
        return this.userObservable = new Observable((observer) => {
            this.validateOtp(otp, number).subscribe((userDetails) => {
                this.getUserToken(userDetails).subscribe((d) => {
                    this.setCookieData(userDetails);
                    observer.next(d);
                    observer.complete();
                }, (err) => {
                    observer.error(err);
                });
            }, (err) => {
                observer.error(err);
            });
        });
    }
    /**
     * @return {?}
     */
    getURLSearchParams() {
        return new HttpParams();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    setCookieData(data) {
        if (data['userId']) {
            /** @type {?} */
            var encryptedString = this.encryptCookie(data['userId']);
            this.cookieService.set(this.config.user.userCookie, encryptedString, 7, '/', '.chalo.com', false, 'Lax');
            // this.cookieService.set(this.config.user.userCookie, encryptedString, 7, '/', null, false, 'Lax');
        }
        this.cookieService.set(this.config.user.loginStateCookie, this.encryptCookie('loggedIn'), 7, '/', '.chalo.com', false, 'Lax');
        // this.cookieService.set(this.config.user.loginStateCookie, this.encryptCookie('loggedIn'), 7, '/', null, false, 'Lax')
    }
}
GoogleLoginService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
GoogleLoginService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [GOOGLE_LOGIN_CONFIG,] }] },
    { type: HttpClient },
    { type: ScriptLoadService },
    { type: CookieService }
];
if (false) {
    /** @type {?} */
    GoogleLoginService.prototype.auth2;
    /** @type {?} */
    GoogleLoginService.prototype.authObservable;
    /** @type {?} */
    GoogleLoginService.prototype.userObservable;
    /** @type {?} */
    GoogleLoginService.prototype.subject;
    /** @type {?} */
    GoogleLoginService.prototype.loginResponsesubject;
    /** @type {?} */
    GoogleLoginService.prototype.config;
    /** @type {?} */
    GoogleLoginService.prototype.httpHandler;
    /** @type {?} */
    GoogleLoginService.prototype.scriptService;
    /** @type {?} */
    GoogleLoginService.prototype.cookieService;
}

//# sourceMappingURL=data:application/json;base64,