/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { Observable } from 'rxjs';
import { take, shareReplay } from 'rxjs/operators';
import { DOCUMENT } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
var ScriptLoadService = /** @class */ (function () {
    function ScriptLoadService(document) {
        this.document = document;
        this.scriptsLoaders = {};
    }
    /**
     *
     * @param url Url of the external script to be loaded
     * @param attributes Attribute list to be added to the script element
     * @param targetEl Target element for the placing script tag. It can be a selector or a element reference
     */
    /**
     *
     * @param {?} url Url of the external script to be loaded
     * @param {?=} attributes Attribute list to be added to the script element
     * @param {?=} targetEl Target element for the placing script tag. It can be a selector or a element reference
     * @return {?}
     */
    ScriptLoadService.prototype.loadScript = /**
     *
     * @param {?} url Url of the external script to be loaded
     * @param {?=} attributes Attribute list to be added to the script element
     * @param {?=} targetEl Target element for the placing script tag. It can be a selector or a element reference
     * @return {?}
     */
    function (url, attributes, targetEl) {
        var _this = this;
        if (targetEl === void 0) { targetEl = 'head'; }
        return this.scriptsLoaders[url] = this.scriptsLoaders[url] || new Observable(function (observer) {
            /** @type {?} */
            var script = _this.document.createElement('script');
            if (attributes) {
                for (var key in attributes) {
                    if (attributes.hasOwnProperty(key)) {
                        script.setAttribute(key, attributes[key]);
                    }
                }
            }
            script.onload = function (event) {
                console.log('onload', event);
                observer.next(event);
                observer.complete();
            };
            script.onerror = function (err) {
                console.log('sdad', err);
                observer.error(err);
            };
            script.src = url;
            /** @type {?} */
            var targetElement = typeof targetEl === 'string' ? _this.document.querySelector(targetEl) : targetEl;
            targetElement.appendChild(script);
        })
            .pipe(take(1), shareReplay(1));
    };
    /** @nocollapse */
    ScriptLoadService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
ScriptLoadService.ɵfac = function ScriptLoadService_Factory(t) { return new (t || ScriptLoadService)(ɵngcc0.ɵɵinject(DOCUMENT)); };
ScriptLoadService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ScriptLoadService, factory: function (t) { return ScriptLoadService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScriptLoadService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();
    return ScriptLoadService;
}());
export { ScriptLoadService };
if (false) {
    /** @type {?} */
    ScriptLoadService.prototype.scriptsLoaders;
    /** @type {?} */
    ScriptLoadService.prototype.document;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LWxvYWQuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L2NoYWxvLWdvb2dsZS1oeWJyaWQtbG9naW4vbGliL3NjcmlwdC1sb2FkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7O0FBQ3pDO0FBSUksSUFBRiwyQkFBc0MsUUFBYTtBQUNyRCxRQUR3QyxhQUFRLEdBQVIsUUFBUSxDQUFLO0FBQUMsOEJBS2hELEVBQUU7QUFDUixLQUxHO0FBQ0gsSUFLRTtBQUNGO0FBQ0U7QUFDRTtBQUNFO0FBRUosT0FERztBQUNMO0FBQVE7QUFBTztBQUE4RDtBQUMvQztBQUNXO0FBQW1CO0FBQVEsSUFGbEUsc0NBQVU7QUFBTztBQUFPO0FBQThEO0FBQy9DO0FBQ1c7QUFBbUI7QUFDdkUsSUFIRSxVQUFXLEdBQVcsRUFBRSxVQUFvQyxFQUFFLFFBQXVDO0FBQUksUUFBekcsaUJBZ0NDO0FBQ0gsUUFqQ2dFLHlCQUFBLEVBQUEsaUJBQXVDO0FBQUksUUFDdkcsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLFVBQVUsQ0FBUSxVQUFDLFFBQVE7QUFBSTtBQUMzRSxZQUFwQixJQUFNLE1BQU0sR0FBc0IsS0FBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDOUUsWUFDTSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLGdCQUFRLEdBQUcsQ0FBQyxD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QUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBaERBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQVJBLEFBTUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZSwgSW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge3Rha2UsIHNoYXJlUmVwbGF5fSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0RPQ1VNRU5UfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2NyaXB0TG9hZFNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnQ6IGFueSkge1xuICB9XG5cbiAgcHJpdmF0ZSBzY3JpcHRzTG9hZGVyczoge1xuICAgIFt1cmw6IHN0cmluZ106IE9ic2VydmFibGU8RXZlbnQ+XG4gIH0gPSB7fTtcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHVybCBVcmwgb2YgdGhlIGV4dGVybmFsIHNjcmlwdCB0byBiZSBsb2FkZWRcbiAgICogQHBhcmFtIGF0dHJpYnV0ZXMgQXR0cmlidXRlIGxpc3QgdG8gYmUgYWRkZWQgdG8gdGhlIHNjcmlwdCBlbGVtZW50XG4gICAqIEBwYXJhbSB0YXJnZXRFbCBUYXJnZXQgZWxlbWVudCBmb3IgdGhlIHBsYWNpbmcgc2NyaXB0IHRhZy4gSXQgY2FuIGJlIGEgc2VsZWN0b3Igb3IgYSBlbGVtZW50IHJlZmVyZW5jZVxuICAgKi9cbiAgbG9hZFNjcmlwdCh1cmw6IHN0cmluZywgYXR0cmlidXRlcz86IHsgW3M6IHN0cmluZ106IHN0cmluZyB9LCB0YXJnZXRFbDogSFRNTEVsZW1lbnQgfCBzdHJpbmcgPSAnaGVhZCcpOiBPYnNlcnZhYmxlPEV2ZW50PiB7XG4gICAgcmV0dXJuIHRoaXMuc2NyaXB0c0xvYWRlcnNbdXJsXSA9IHRoaXMuc2NyaXB0c0xvYWRlcnNbdXJsXSB8fCBuZXcgT2JzZXJ2YWJsZTxFdmVudD4oKG9ic2VydmVyKSA9PiB7XG4gICAgICBjb25zdCBzY3JpcHQ6IEhUTUxTY3JpcHRFbGVtZW50ID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuICAgICAgaWYgKGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIHNjcmlwdC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzY3JpcHQub25sb2FkID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnb25sb2FkJywgZXZlbnQpO1xuICAgICAgICBvYnNlcnZlci5uZXh0KGV2ZW50KTtcbiAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgIH07XG5cbiAgICAgIHNjcmlwdC5vbmVycm9yID0gZXJyID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ3NkYWQnLCBlcnIpO1xuICAgICAgICBvYnNlcnZlci5lcnJvcihlcnIpO1xuICAgICAgfTtcblxuICAgICAgc2NyaXB0LnNyYyA9IHVybDtcblxuICAgICAgY29uc3QgdGFyZ2V0RWxlbWVudDogSFRNTEVsZW1lbnQgPSB0eXBlb2YgdGFyZ2V0RWwgPT09ICdzdHJpbmcnID8gdGhpcy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldEVsKSA6IHRhcmdldEVsO1xuICAgICAgdGFyZ2V0RWxlbWVudC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIH0pXG4gICAgLnBpcGUoXG4gICAgICB0YWtlKDEpLFxuICAgICAgc2hhcmVSZXBsYXkoMSlcbiAgICApO1xuICB9XG59XG4iXX0=