/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { Observable } from 'rxjs';
import { take, shareReplay } from 'rxjs/operators';
import { DOCUMENT } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
export class ScriptLoadService {
    /**
     * @param {?} document
     */
    constructor(document) {
        this.document = document;
        this.scriptsLoaders = {};
    }
    /**
     *
     * @param {?} url Url of the external script to be loaded
     * @param {?=} attributes Attribute list to be added to the script element
     * @param {?=} targetEl Target element for the placing script tag. It can be a selector or a element reference
     * @return {?}
     */
    loadScript(url, attributes, targetEl = 'head') {
        return this.scriptsLoaders[url] = this.scriptsLoaders[url] || new Observable((observer) => {
            /** @type {?} */
            const script = this.document.createElement('script');
            if (attributes) {
                for (const key in attributes) {
                    if (attributes.hasOwnProperty(key)) {
                        script.setAttribute(key, attributes[key]);
                    }
                }
            }
            script.onload = (event) => {
                console.log('onload', event);
                observer.next(event);
                observer.complete();
            };
            script.onerror = err => {
                console.log('sdad', err);
                observer.error(err);
            };
            script.src = url;
            /** @type {?} */
            const targetElement = typeof targetEl === 'string' ? this.document.querySelector(targetEl) : targetEl;
            targetElement.appendChild(script);
        })
            .pipe(take(1), shareReplay(1));
    }
}
ScriptLoadService.ɵfac = function ScriptLoadService_Factory(t) { return new (t || ScriptLoadService)(ɵngcc0.ɵɵinject(DOCUMENT)); };
ScriptLoadService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ScriptLoadService, factory: ScriptLoadService.ɵfac });
/** @nocollapse */
ScriptLoadService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScriptLoadService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, null); })();
if (false) {
    /** @type {?} */
    ScriptLoadService.prototype.scriptsLoaders;
    /** @type {?} */
    ScriptLoadService.prototype.document;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LWxvYWQuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmc6L2NoYWxvLWdvb2dsZS1oeWJyaWQtbG9naW4vbGliL3NjcmlwdC1sb2FkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7O0FBR3pDLE1BQU07QUFDTjtBQUNPO0FBQTJCO0FBQVEsSUFBeEMsWUFBc0MsUUFBYTtBQUNyRCxRQUR3QyxhQUFRLEdBQVIsUUFBUSxDQUFLO0FBQUMsOEJBS2hELEVBQUU7QUFDUixLQUxHO0FBQ0g7QUFDTztBQUFPO0FBSWQ7QUFHWTtBQUMyQztBQUFtQjtBQUFRLElBRWhGLFVBQVUsQ0FBQyxHQUFXLEVBQUUsVUFBb0MsRUFBRSxXQUFpQyxNQUFNO0FBQUksUUFDdkcsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLFVBQVUsQ0FBUSxDQUFDLFFBQVEsRUFBRSxFQUFFO0FBQ3JHO0FBQTZCLFlBQXZCLE1BQU0sTUFBTSxHQUFzQixJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM5RSxZQUNNLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDdkIsZ0JBQVEsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQztBQUN2QyxvQkFBVSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMvQyx3QkFBWSxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN0RCxxQkFBVztBQUNYLGlCQUFTO0FBQ1QsYUFBTztBQUNQLFlBQ00sTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO0FBQ3ZDLGdCQUFRLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLGdCQUFRLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDN0IsZ0JBQVEsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQzVCLGFBQU8sQ0FBQztBQUNSLFlBQ00sTUFBTSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsRUFBRTtBQUM3QixnQkFBUSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNqQyxnQkFBUSxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzVCLGFBQU8sQ0FBQztBQUNSLFlBQ00sTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDdkI7QUFDNEIsWUFBdEIsTUFBTSxhQUFhLEdBQWdCLE9BQU8sUUFBUSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUN6SCxZQUFNLGFBQWEsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEMsU0FBSyxDQUFDO0FBQ04sYUFBSyxJQUFJLENBQ0gsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FDZixDQUFDO0FBQ04sS0FBRztBQUNIOzZDQWpEQyxVQUFVO21IQUNUO0FBQUM7QUFBbUI7QUFFUyw0Q0FBaEIsTUFBTSxTQUFDLFFBQVE7QUFBUTs7Ozs7O2tDQUFFO0FBQUM7QUFBYTtBQUd6QztBQUNvQjtBQUlqQztBQUNxQzs7QUFqQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBSkEsQUFZQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFoREEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlLCBJbmplY3R9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7dGFrZSwgc2hhcmVSZXBsYXl9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7RE9DVU1FTlR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTY3JpcHRMb2FkU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogYW55KSB7XG4gIH1cblxuICBwcml2YXRlIHNjcmlwdHNMb2FkZXJzOiB7XG4gICAgW3VybDogc3RyaW5nXTogT2JzZXJ2YWJsZTxFdmVudD5cbiAgfSA9IHt9O1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gdXJsIFVybCBvZiB0aGUgZXh0ZXJuYWwgc2NyaXB0IHRvIGJlIGxvYWRlZFxuICAgKiBAcGFyYW0gYXR0cmlidXRlcyBBdHRyaWJ1dGUgbGlzdCB0byBiZSBhZGRlZCB0byB0aGUgc2NyaXB0IGVsZW1lbnRcbiAgICogQHBhcmFtIHRhcmdldEVsIFRhcmdldCBlbGVtZW50IGZvciB0aGUgcGxhY2luZyBzY3JpcHQgdGFnLiBJdCBjYW4gYmUgYSBzZWxlY3RvciBvciBhIGVsZW1lbnQgcmVmZXJlbmNlXG4gICAqL1xuICBsb2FkU2NyaXB0KHVybDogc3RyaW5nLCBhdHRyaWJ1dGVzPzogeyBbczogc3RyaW5nXTogc3RyaW5nIH0sIHRhcmdldEVsOiBIVE1MRWxlbWVudCB8IHN0cmluZyA9ICdoZWFkJyk6IE9ic2VydmFibGU8RXZlbnQ+IHtcbiAgICByZXR1cm4gdGhpcy5zY3JpcHRzTG9hZGVyc1t1cmxdID0gdGhpcy5zY3JpcHRzTG9hZGVyc1t1cmxdIHx8IG5ldyBPYnNlcnZhYmxlPEV2ZW50Pigob2JzZXJ2ZXIpID0+IHtcbiAgICAgIGNvbnN0IHNjcmlwdDogSFRNTFNjcmlwdEVsZW1lbnQgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gICAgICBpZiAoYXR0cmlidXRlcykge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgaWYgKGF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNjcmlwdC5vbmxvYWQgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdvbmxvYWQnLCBldmVudCk7XG4gICAgICAgIG9ic2VydmVyLm5leHQoZXZlbnQpO1xuICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgfTtcblxuICAgICAgc2NyaXB0Lm9uZXJyb3IgPSBlcnIgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnc2RhZCcsIGVycik7XG4gICAgICAgIG9ic2VydmVyLmVycm9yKGVycik7XG4gICAgICB9O1xuXG4gICAgICBzY3JpcHQuc3JjID0gdXJsO1xuXG4gICAgICBjb25zdCB0YXJnZXRFbGVtZW50OiBIVE1MRWxlbWVudCA9IHR5cGVvZiB0YXJnZXRFbCA9PT0gJ3N0cmluZycgPyB0aGlzLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0RWwpIDogdGFyZ2V0RWw7XG4gICAgICB0YXJnZXRFbGVtZW50LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgfSlcbiAgICAucGlwZShcbiAgICAgIHRha2UoMSksXG4gICAgICBzaGFyZVJlcGxheSgxKVxuICAgICk7XG4gIH1cbn1cbiJdfQ==