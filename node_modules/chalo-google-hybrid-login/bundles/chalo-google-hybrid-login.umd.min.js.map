{"version":3,"sources":["ng://chalo-google-hybrid-login/lib/models/chalo-google-login.config.ts","ng://chalo-google-hybrid-login/lib/script-load.service.ts","ng://chalo-google-hybrid-login/lib/chalo-google-hybrid-login.service.ts","ng://chalo-google-hybrid-login/lib/models/chalo-google-login-response.ts","ng://chalo-google-hybrid-login/lib/chalo-google-hybrid-login.component.ts","ng://chalo-google-hybrid-login/lib/models/chalo-google-login-service.interceptor.ts","ng://chalo-google-hybrid-login/lib/mobie-login/mobie-login.component.ts","ng://chalo-google-hybrid-login/lib/directives/number.directive.ts","ng://chalo-google-hybrid-login/lib/user-login/user-login.component.ts","ng://chalo-google-hybrid-login/lib/chalo-google-hybrid-login.module.ts"],"names":["GOOGLE_LOGIN_CONFIG","InjectionToken","ScriptLoadService","document","this","prototype","loadScript","url","attributes","targetEl","_this","scriptsLoaders","Observable","observer","script","createElement","key","hasOwnProperty","setAttribute","onload","event","console","log","next","complete","onerror","err","error","src","querySelector","appendChild","pipe","take","shareReplay","Injectable","Inject","args","DOCUMENT","GoogleLoginService","config","httpHandler","scriptService","cookieService","Subject","subscribe","data","gapi","load","auth2","init","client_id","auth","google","scope","getGoogleLogin","authObservable","grantOfflineAccess","then","res","sendAuthorization","code","getUserToken","d","setCookieData","getUserDetails","user","getUserCookieValue","authenticateUserUrl","encodeURIComponent","get","getToken","userObservable","userDetails","setGoogleLoginResponse","googleResponse","loginResponsesubject","getGoogleLoginResponse","asObservable","isUserAuthenticated","userCookie","token","authCodeUrl","headerToken","value","options","headers","HttpHeaders","auth-code","post","userCredential","username","password","grant_type","getTokenFromServer","getUserTokenFromRefreshToken","refreshToken","refresh_token","userTokenServerUrl","urlEncodedData","getEncodedData","btoa","server","client_secret","Authorization","set","urlEncodedDataPairs","name_1","push","join","replace","logoutUser","logout","logoutUrl","delete","responseType","updateUserState","loginStateCookie","encryptCookie","sendLogoutMessage","msg","subject","message","getLogoutMessage","stringToEncrypt","CryptoJS","enc","Utf8","parse","AES","encrypt","mode","ECB","padding","pad","ZeroPadding","toString","decryptString","encryptedString","decrypt","getUserCookie","decryptedUserCookie","encryptedCookie","sendOtp","number","sendOtpUrl","validateUser","body","validateUserUrl","validateOtp","otp","validateOtpUrl","params","getURLSearchParams","getMobileToken","HttpParams","HttpClient","CookieService","Success","Failure","ChaloGoogleHybridLoginComponent","loginService","EventEmitter","ngOnInit","StatusCode","onLoginResponse","emit","showLoginType","type","loginType","showGoogleLogin","onToggleOption","show","onBack","signInResponse","e","Component","selector","template","encapsulation","ViewEncapsulation","None","Output","Input","GOOGLE_LOGIN_HTTP_INTERCEPTOR","GoogleAuthHttpInterceptor","googleLoginInterceptor","googleLoginService","intercept","req","includes","check","loginCookie","decryptLoginCookie","handle","Optional","MobieLoginComponent","fb","sendOtpForm","group","FormControl","Validators","required","minLength","maxLength","verifyOtpForm","ngOnChanges","changes","reset","hideSendOtpForm","selectedPhoneNo","showsendOtpForm","verifyOtp","onSignInResponse","onOtpChange","length","setValue","updateValueAndValidity","FormBuilder","NumberDirective","el","onPaste","preventDefault","pastedInput","clipboardData","getData","execCommand","onKeyDown","indexOf","keyCode","ctrlKey","metaKey","shiftKey","Directive","ElementRef","HostListener","UserLoginComponent","initializeForm","loginForm","userId","staticPassword","onSubmit","valid","getRawValue","JSON","stringify","ChaloGoogleHybridLoginModule","NgModule","imports","HttpClientModule","CommonModule","FormsModule","ReactiveFormsModule","MatFormFieldModule","MatInputModule","NgOtpInputModule","declarations","exports","providers","provide","HTTP_INTERCEPTORS","useClass","multi"],"mappings":"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","sourcesContent":["import {InjectionToken} from '@angular/core';\n\nexport interface GoogleLoginConfig {\n  authCodeUrl: string;\n  userTokenServerUrl: string;\n  sendOtpUrl?:string,\n  validateOtpUrl?:string;\n  validateUserUrl?: string;\n  auth: {\n    google: {\n        client_id: string,\n        redirect_uri?: string,\n        scope?: string\n    },\n    server: {\n        client_id: string,\n        client_secret: string\n    }\n  };\n  user:{\n    userCookie:string,\n    authenticateUserUrl:string,\n    loginStateCookie:string\n  }\n  logout:{\n    logoutUrl:string\n  }\n}\n\nexport const GOOGLE_LOGIN_CONFIG = new InjectionToken<GoogleLoginConfig>('chalo-google-login.config');\n","import {Injectable, Inject} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {take, shareReplay} from 'rxjs/operators';\nimport {DOCUMENT} from '@angular/common';\n\n@Injectable()\nexport class ScriptLoadService {\n\n  constructor(@Inject(DOCUMENT) private document: any) {\n  }\n\n  private scriptsLoaders: {\n    [url: string]: Observable<Event>\n  } = {};\n\n  /**\n   *\n   * @param url Url of the external script to be loaded\n   * @param attributes Attribute list to be added to the script element\n   * @param targetEl Target element for the placing script tag. It can be a selector or a element reference\n   */\n  loadScript(url: string, attributes?: { [s: string]: string }, targetEl: HTMLElement | string = 'head'): Observable<Event> {\n    return this.scriptsLoaders[url] = this.scriptsLoaders[url] || new Observable<Event>((observer) => {\n      const script: HTMLScriptElement = this.document.createElement('script');\n\n      if (attributes) {\n        for (const key in attributes) {\n          if (attributes.hasOwnProperty(key)) {\n            script.setAttribute(key, attributes[key]);\n          }\n        }\n      }\n\n      script.onload = (event: Event) => {\n        console.log('onload', event);\n        observer.next(event);\n        observer.complete();\n      };\n\n      script.onerror = err => {\n        console.log('sdad', err);\n        observer.error(err);\n      };\n\n      script.src = url;\n\n      const targetElement: HTMLElement = typeof targetEl === 'string' ? this.document.querySelector(targetEl) : targetEl;\n      targetElement.appendChild(script);\n    })\n    .pipe(\n      take(1),\n      shareReplay(1)\n    );\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { GOOGLE_LOGIN_CONFIG, GoogleLoginConfig } from './models/chalo-google-login.config';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { ScriptLoadService } from './script-load.service';\nimport { Observable, Subject } from 'rxjs';\nimport { CookieService } from 'ngx-cookie-service';\nimport { GoogleLoginResponse } from './models';\nimport CryptoJS from 'crypto-js';\n\ndeclare var gapi;\n\n@Injectable()\nexport class GoogleLoginService<T> {\n  auth2;\n  authObservable: Observable<boolean | T>;\n  userObservable: Observable<boolean | T>;\n  private subject = new Subject<any>();\n\n  loginResponsesubject = new Subject<GoogleLoginResponse>();\n\n  constructor(@Inject(GOOGLE_LOGIN_CONFIG) private config: GoogleLoginConfig, private httpHandler: HttpClient, private scriptService: ScriptLoadService,\n    private cookieService: CookieService) {\n    this.scriptService.loadScript('https://apis.google.com/js/client:platform.js').subscribe((data) => {\n      try {\n        gapi.load('client', () => {\n          this.auth2 = gapi.auth2.init({\n            client_id: this.config.auth.google.client_id,\n            scope: 'profile'\n          });\n        });\n      } catch (err) {\n        console.log('error in initializing auth');\n      }\n    }, err => {\n      console.log('erro', err);\n    });\n\n  }\n\n  getGoogleLogin() {\n    return this.authObservable = new Observable<boolean | T>((observer) => {\n      if (!this.auth2) {\n        observer.error('Auth instance is not defined');\n      } else {\n        this.auth2.grantOfflineAccess().then((res) => {\n          this.sendAuthorization(res.code).subscribe((data) => {\n            this.getUserToken(data).subscribe((d: T) => {\n             this.setCookieData(data)\n              observer.next(d);\n              observer.complete();\n            }, (err) => {\n              observer.error(err);\n            });\n          }, (err) => {\n            observer.error(err);\n          });\n        });\n      }\n\n    });\n\n  }\n\n  getUserDetails() {\n    let user = this.getUserCookieValue();\n    var url = this.config.user.authenticateUserUrl;\n    url=`${url}?userId=${encodeURIComponent(user)}`\n    return this.httpHandler.get(url);\n  }\n\n  getToken() {\n    return this.userObservable = new Observable<boolean | T>((observer) => {\n      this.getUserDetails().subscribe((userDetails) => {\n        this.getUserToken(userDetails).subscribe((d: T) => {\n          observer.next(d);\n          observer.complete();\n        }, (err) => {\n          observer.error(err);\n        })\n      }, (err) => {\n        observer.error(err);\n      })\n    })\n  }\n\n  setGoogleLoginResponse(googleResponse) {\n    this.loginResponsesubject.next(googleResponse);\n\n  }\n\n  getGoogleLoginResponse(): Observable<GoogleLoginResponse> {\n    return this.loginResponsesubject.asObservable();\n  }\n\n\n  isUserAuthenticated() {\n    let userCookie = this.getUserCookieValue();\n    if (userCookie) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  getUserCookieValue() {\n    return this.cookieService.get(this.config.user.userCookie);\n  }\n\n  sendAuthorization(token) {\n    const url = this.config.authCodeUrl;\n    const headerToken = {\n      key: 'auth-code',\n      value: token\n    };\n    const headers = new HttpHeaders({ 'auth-code': headerToken.value });\n    const options = { headers };\n    return this.httpHandler.post(url, null, options);\n  }\n\n  getUserToken(userCredential) {\n    const data = {\n      username: userCredential.username,\n      password: userCredential.password,\n      grant_type: 'password'\n    };\n    return this.getTokenFromServer(data);\n  }\n\n  getUserTokenFromRefreshToken(refreshToken): Observable<any> {\n    const data = {\n      refresh_token: refreshToken,\n      grant_type: 'refresh_token'\n    };\n    return this.getTokenFromServer(data);\n  }\n\n  private getTokenFromServer(data): Observable<any> {\n    const url = this.config.userTokenServerUrl;\n    const urlEncodedData = this.getEncodedData(data);\n    const headerToken = {\n      key: 'Authorization',\n      value: 'Basic ' + btoa(`${this.config.auth.server.client_id}:${this.config.auth.server.client_secret}`)\n    };\n    const headers = new HttpHeaders({ Authorization: headerToken.value }).set('Content-Type', 'application/x-www-form-urlencoded');\n\n    const options = { headers };\n\n    return this.httpHandler.post(url, urlEncodedData, options);\n  }\n\n  private getEncodedData(data) {\n    const urlEncodedDataPairs = [];\n    for (const name in data) {\n      if (data.hasOwnProperty(name)) {\n        urlEncodedDataPairs.push(encodeURIComponent(name) + '=' + encodeURIComponent(data[name]));\n      }\n    }\n    const urlEncodedData = urlEncodedDataPairs.join('&').replace(/%20/g, '+');\n    return urlEncodedData;\n  }\n\n  logoutUser() {\n    let userCookie = this.getUserCookieValue()\n    let url = `${this.config.logout.logoutUrl}`;\n    if (userCookie) {\n      this.cookieService.delete(this.config.user.userCookie, '/', '.chalo.com');\n      url = `${url}?userId=${userCookie}`\n    }\n    return this.httpHandler.post(url, {}, { responseType: 'text' })\n  }\n\n  updateUserState() {\n    let userCookie = this.getUserCookieValue()\n    // this.cookieService.set(this.config.user.loginStateCookie, this.encryptCookie('loggedOut'), 7, '/', null, false, 'Lax')\n\n    this.cookieService.set(this.config.user.loginStateCookie, this.encryptCookie('loggedOut'), 7, '/', '.chalo.com', false, 'Lax')\n    if (userCookie) {\n      // this.cookieService.delete(this.config.user.userCookie, '/');\n      this.cookieService.delete(this.config.user.userCookie, '/', '.chalo.com');\n    }\n  }\n\n  sendLogoutMessage(msg: string) {\n    this.subject.next({ message: msg });\n  }\n\n  getLogoutMessage(): Observable<any> {\n    return this.subject.asObservable();\n  }\n\n  encryptCookie(stringToEncrypt) {\n    var key = CryptoJS.enc.Utf8.parse('web_chalo_appkey');\n    var encryptedString = CryptoJS.AES.encrypt(stringToEncrypt, key, {\n      mode: CryptoJS.mode.ECB,\n      padding: CryptoJS.pad.ZeroPadding\n    });\n    return encryptedString.toString()\n  }\n\n  decryptString(encryptedString) {\n    var key = CryptoJS.enc.Utf8.parse('web_chalo_appkey');\n    var decrypted = CryptoJS.AES.decrypt(encryptedString, key, {\n      mode: CryptoJS.mode.ECB,\n      padding: CryptoJS.pad.ZeroPadding\n    });\n    return decrypted.toString(CryptoJS.enc.Utf8);\n  }\n\n  getUserCookie(){\n    let encryptedCookie=this.getUserCookieValue();\n    let decryptedUserCookie;\n    if(encryptedCookie) decryptedUserCookie= this.decryptString(encryptedCookie);\n    return decryptedUserCookie;\n  }\n\n  sendOtp(number){\n    let url=`${this.config.sendOtpUrl}`\n   return this.httpHandler.post(url,{\"number\":number})\n  }\n\n  validateUser(body){\n    let url=`${this.config.validateUserUrl}`\n    return this.httpHandler.post(url, body)\n  }\n\n  validateOtp(otp,number){\n    let url=`${this.config.validateOtpUrl}`\n    let params = this.getURLSearchParams()\n    .set(\"otp\", otp)\n    .set(\"mobile\", number);\n    return this.httpHandler.get(url, {params});\n  }\n\n  getMobileToken(otp,number){\n    return this.userObservable = new Observable<boolean | T>((observer) => {\n      this.validateOtp(otp,number).subscribe((userDetails) => {\n        this.getUserToken(userDetails).subscribe((d: T) => {\n          this.setCookieData(userDetails);\n          observer.next(d);\n          observer.complete();\n        }, (err) => {\n          observer.error(err);\n        })\n      }, (err) => {\n        observer.error(err);\n      })\n    })\n  }\n\n  getURLSearchParams(): HttpParams {\n    return new HttpParams();\n  }\n\n  setCookieData(data){\n    if (data['userId']) {\n      var encryptedString = this.encryptCookie(data['userId']);\n      this.cookieService.set(this.config.user.userCookie,encryptedString, 7, '/', '.chalo.com',false,'Lax');\n      // this.cookieService.set(this.config.user.userCookie, encryptedString, 7, '/', null, false, 'Lax');\n    }\n\n    this.cookieService.set(this.config.user.loginStateCookie,this.encryptCookie('loggedIn'), 7, '/','.chalo.com',false,'Lax')\n    // this.cookieService.set(this.config.user.loginStateCookie, this.encryptCookie('loggedIn'), 7, '/', null, false, 'Lax')\n  }\n\n}\n\n","export enum StatusCode {\n    Success,\n    Failure\n  }\n  \n  export interface GoogleLoginResponse {\n    code: StatusCode;\n    data: { [key: string]: any };\n  }","import { Component, OnInit, ViewEncapsulation, Output, EventEmitter, Input } from '@angular/core';\nimport { GoogleLoginResponse, StatusCode } from \"./models/chalo-google-login-response\";\nimport { GoogleLoginService } from \"./chalo-google-hybrid-login.service\";\n\n@Component({\n  selector: 'chalo-google-hybrid-login',\n  templateUrl: './chalo-google-hybrid-login.component.html',\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: ['./chalo-google-hybrid-login.component.css']\n})\nexport class ChaloGoogleHybridLoginComponent implements OnInit {\n  @Output() onLoginResponse: EventEmitter<GoogleLoginResponse> = new EventEmitter<GoogleLoginResponse>();\n  @Input() hasMobileLogin = false;\n  @Input() hasUserLogin = false;\n  showGoogleLogin = true;\n  loginType = -1;\n  \n  constructor(private loginService: GoogleLoginService<any>) {\n\n  }\n\n  ngOnInit() {\n    if (this.loginService.isUserAuthenticated()) {\n      this.loginService.getToken().subscribe((data) => {\n        this.loginService.setGoogleLoginResponse({ code: StatusCode.Success, data })\n      }, (err) => {\n        this.loginService.setGoogleLoginResponse({ code: StatusCode.Failure, data: err })\n\n      });\n    } else {\n      console.log(\"cookie not available\")\n    }\n  }\n\n  getGoogleLogin() {\n    this.loginService.getGoogleLogin().subscribe((data) => {\n      this.onLoginResponse.emit({ code: StatusCode.Success, data });\n    }, (err) => {\n      this.onLoginResponse.emit({ code: StatusCode.Failure, data: err });\n    });\n  }\n\n  showLoginType(type) {\n    this.loginType = type;\n    this.showGoogleLogin=false;\n  }\n\n  onToggleOption(show) {\n    this.showGoogleLogin = show;\n  }\n\n  onBack(){\n    this.showGoogleLogin=true\n    this.loginType = -1;\n  }\n\n\n  signInResponse(e) {\n    this.onLoginResponse.emit(e);\n  }\n}\n","import { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from \"@angular/common/http\";\nimport { InjectionToken, Optional, Inject, Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { CookieService } from \"ngx-cookie-service\";\nimport { GoogleLoginService } from \"../chalo-google-hybrid-login.service\";\nimport { GoogleLoginConfig, GOOGLE_LOGIN_CONFIG } from \"./chalo-google-login.config\";\nexport const GOOGLE_LOGIN_HTTP_INTERCEPTOR = new InjectionToken<HttpInterceptor>('chalo-google-login.interceptor');\n\n@Injectable()\nexport class GoogleAuthHttpInterceptor implements HttpInterceptor {\n\n  constructor(@Optional() @Inject(GOOGLE_LOGIN_HTTP_INTERCEPTOR) private googleLoginInterceptor: HttpInterceptor,\n    private cookieService: CookieService, private googleLoginService: GoogleLoginService<any>,@Inject(GOOGLE_LOGIN_CONFIG)  private config :GoogleLoginConfig) {\n\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (!(req.url.includes('token') || req.url.includes('authenticated') || req.url.includes('Otp') || req.url.includes('logout')) && this.cookieService.check(this.config.user.loginStateCookie)) {\n      const loginCookie=this.cookieService.get(this.config.user.loginStateCookie)\n      if (loginCookie) {\n        var decryptLoginCookie=this.googleLoginService.decryptString(loginCookie);\n        if(decryptLoginCookie && decryptLoginCookie==='loggedOut'){\n          this.googleLoginService.sendLogoutMessage('Signed out');\n        }\n      }\n    }\n    if (this.googleLoginInterceptor) {\n      return this.googleLoginInterceptor.intercept(req, next)\n    } else {\n      return next.handle(req);\n    }\n  }\n\n\n}\n","import { Component, OnInit, EventEmitter, Output, Input, SimpleChanges } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { GoogleLoginService } from '../chalo-google-hybrid-login.service';\nimport { GoogleLoginResponse, StatusCode } from '../models';\n\n@Component({\n  selector: 'mobie-login',\n  templateUrl: './mobie-login.component.html',\n  styleUrls: ['./mobie-login.component.css']\n})\nexport class MobieLoginComponent implements OnInit {\n  @Output() onSignInResponse: EventEmitter<GoogleLoginResponse> = new EventEmitter<GoogleLoginResponse>();\n  @Output() showGoogleSignIn: EventEmitter<any> = new EventEmitter<any>();\n  @Input() showsendOtpForm: boolean = true;\n\n  sendOtpForm: FormGroup;\n  verifyOtpForm: FormGroup;\n  showVerifyOtpForm: boolean;\n  number: any;\n\n  constructor(private fb: FormBuilder, private loginService: GoogleLoginService<any>) {\n    this.sendOtpForm = fb.group({\n      number: new FormControl('', [Validators.required, Validators.minLength(10), Validators.maxLength(10)])\n    });\n\n    this.verifyOtpForm = fb.group({\n      otp: new FormControl('', [Validators.required, Validators.minLength(6), Validators.maxLength(6)])\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['showsendOtpForm']) {\n      this.sendOtpForm.reset();\n      this.verifyOtpForm.reset();\n    }\n  }\n\n\n  sendOtp(hideSendOtpForm) {\n    let selectedPhoneNo = this.sendOtpForm.get('number').value;\n\n    this.number = selectedPhoneNo ? selectedPhoneNo : this.number;\n    this.loginService.sendOtp(this.number).subscribe((res) => {\n      if (hideSendOtpForm) {\n        this.showsendOtpForm = false;\n        // this.showGoogleSignIn.emit(false);\n      }\n    }, err => {\n      this.showsendOtpForm = true;\n      // this.showGoogleSignIn.emit(true)\n    })\n  }\n\n  verifyOtp() {\n    let otp = this.verifyOtpForm.get('otp').value?this.verifyOtpForm.get('otp').value:'';\n    this.loginService.getMobileToken(otp, this.number).subscribe((data) => {\n      this.onSignInResponse.emit({ code: StatusCode.Success, data });\n    }, (err) => {\n      this.onSignInResponse.emit({ code: StatusCode.Failure, data: err });\n    });\n  }\n\n  onOtpChange(value) {\n    if (value.length === 6) {\n      this.verifyOtpForm.get('otp').setValue(value)\n    }else{\n      this.verifyOtpForm.get('otp').setValue('')\n    }\n    this.verifyOtpForm.get('otp').updateValueAndValidity();\n\n  }\n}\n","import { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n   selector: '[numberDirective]'\n})\n\nexport class NumberDirective {\n   constructor(private el: ElementRef) { }\n   @HostListener('paste', ['$event'])\n   onPaste(event: ClipboardEvent) {\n     event.preventDefault();\n     const pastedInput: string = event.clipboardData\n       .getData('text/plain')\n       .replace(/\\D/g, ''); // get a digit-only string\n     document.execCommand('insertText', false, pastedInput);\n   }\n   @HostListener('keydown', ['$event'])\n   onKeyDown(e: KeyboardEvent) {\n     if (\n       // Allow: Delete, Backspace, Tab, Escape, Enter\n       [46, 8, 9, 27, 13].indexOf(e.keyCode) !== -1 || \n       (e.keyCode === 65 && e.ctrlKey === true) || // Allow: Ctrl+A\n       (e.keyCode === 67 && e.ctrlKey === true) || // Allow: Ctrl+C\n       (e.keyCode === 86 && e.ctrlKey === true) || // Allow: Ctrl+V\n       (e.keyCode === 88 && e.ctrlKey === true) || // Allow: Ctrl+X\n       (e.keyCode === 65 && e.metaKey === true) || // Cmd+A (Mac)\n       (e.keyCode === 67 && e.metaKey === true) || // Cmd+C (Mac)\n       (e.keyCode === 86 && e.metaKey === true) || // Cmd+V (Mac)\n       (e.keyCode === 88 && e.metaKey === true) || // Cmd+X (Mac)\n       (e.keyCode >= 35 && e.keyCode <= 39) // Home, End, Left, Right\n     ) {\n       return;  // let it happen, don't do anything\n     }\n     // Ensure that it is a number and stop the keypress\n     if (\n       (e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) &&\n       (e.keyCode < 96 || e.keyCode > 105)\n     ) {\n       e.preventDefault();\n     }\n   }\n}","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { GoogleLoginService } from '../chalo-google-hybrid-login.service';\nimport { GoogleLoginResponse, StatusCode } from '../models';\n\n@Component({\n  selector: 'user-login',\n  templateUrl: './user-login.component.html',\n  styleUrls: ['./user-login.component.css']\n})\nexport class UserLoginComponent implements OnInit {\n  loginForm: FormGroup;\n  @Output() onSignInResponse: EventEmitter<GoogleLoginResponse> = new EventEmitter<GoogleLoginResponse>();\n\n  constructor(\n    private fb: FormBuilder,\n    private loginService: GoogleLoginService<any>\n  ) {\n    this.initializeForm();\n  }\n\n  ngOnInit() {\n  }\n\n  initializeForm() {\n    this.loginForm = this.fb.group({\n      userId: [null, Validators.required],\n      staticPassword: [null, Validators.required]\n    })\n  }\n\n  onSubmit() {\n    if (this.loginForm.valid) {\n      let body = this.loginForm.getRawValue();\n      this.loginService.validateUser({\n        data: this.loginService.encryptCookie(JSON.stringify(body))\n      }).subscribe((res) => {\n        this.loginService.getUserToken(res).subscribe((data) => {\n          this.loginService.setCookieData(data)\n          this.onSignInResponse.emit({ code: StatusCode.Success, data })\n        }, (err) => {\n          this.onSignInResponse.emit({ code: StatusCode.Failure, data: err });\n        });\n      }, (err) => {\n        this.onSignInResponse.emit({ code: StatusCode.Failure, data: err });\n      })\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { ChaloGoogleHybridLoginComponent } from './chalo-google-hybrid-login.component';\nimport {HttpClientModule} from \"@angular/common/http\";\nimport {GoogleLoginService} from \"./chalo-google-hybrid-login.service\";\nimport {HTTP_INTERCEPTORS} from \"@angular/common/http\";\nimport {GoogleAuthHttpInterceptor} from \"./models/chalo-google-login-service.interceptor\";\nimport { ScriptLoadService } from './script-load.service';\nimport { CommonModule } from '@angular/common';\nimport { CookieService } from 'ngx-cookie-service';\nimport { MobieLoginComponent } from './mobie-login/mobie-login.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {MatInputModule} from '@angular/material/input'\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { NumberDirective } from './directives/number.directive';\nimport { NgOtpInputModule } from  'ng-otp-input';\nimport { UserLoginComponent } from './user-login/user-login.component';\n\n@NgModule({\n  imports: [HttpClientModule,CommonModule,FormsModule,ReactiveFormsModule,\n    MatFormFieldModule,MatInputModule, NgOtpInputModule\n  ],\n  declarations: [ChaloGoogleHybridLoginComponent, MobieLoginComponent,NumberDirective, UserLoginComponent],\n  exports: [ChaloGoogleHybridLoginComponent],\n  providers: [GoogleLoginService, ScriptLoadService,CookieService,\n    {provide: HTTP_INTERCEPTORS, useClass: GoogleAuthHttpInterceptor, multi: true}],\n\n})\nexport class ChaloGoogleHybridLoginModule { }\n"]}