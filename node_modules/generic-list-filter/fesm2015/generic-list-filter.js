import { EventEmitter, Component, Input, Output, NgModule } from '@angular/core';
import * as moment from 'moment';
import { findIndex } from 'lodash';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { NgxMaterialTimepickerModule } from 'ngx-material-timepicker';

class GenericListFilterComponent {
    constructor() {
        this.onFilterChange = new EventEmitter();
        this.selectedValues = [];
        this.selectedCategory = {
            type: '',
            value: ''
        };
        this.isFiltersApplied = false;
        this.openFilterBar = false;
        this.timeFilter = false;
        this.searchKey = '';
        this.isCountClicked = false;
        this.isData = false;
        this.isStatus = false;
    }
    ngOnInit() {
    }
    ngOnChanges() {
        //Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.
        //Add '${implements OnChanges}' to the class.
        setTimeout(() => {
            this.filterKeys1 = Object.keys(this.list);
            this.selectedFilterTabType1 = this.filterKeys1[0];
            this.fromTime = this.paramList.fromTime;
            this.toTime = this.paramList.toTime;
            this.listCopy = JSON.parse(JSON.stringify(this.list));
            this.isStatus = this.list.isStatus;
            this.category = this.list.category;
            this.isData = true;
        }, 2000);
    }
    openFilterSideBar() {
        this.searchKey = '';
        this.list[this.selectedFilterTabType1] = this.listCopy[this.selectedFilterTabType1];
        this.openFilterBar = !this.openFilterBar;
    }
    onCancel() {
        this.openFilterBar = false;
    }
    onRemoveFilter(item) {
        if (item == 'time') {
            this.fromTime = moment().subtract(3, 'hours').format('LT');
            this.toTime = moment().format('LT');
            this.timeFilter = false;
        }
        delete this.allAppliedFilters[item];
        this.selectedValues = this.selectedValues.filter(obj => {
            return obj.type !== item;
        });
        console.log(item, this.allAppliedFilters, this.selectedValues);
        this.applyFilters();
    }
    applyFilters() {
        this.isFiltersApplied = true;
        this.openFilterBar = false;
        let allAppliedFilters = {};
        this.selectedValues.forEach(item => {
            allAppliedFilters[item.type] = item.value;
        });
        if (this.timeFilter) {
            allAppliedFilters['time'] = `${this.fromTime} to ${this.toTime}`;
        }
        console.log(allAppliedFilters);
        this.allAppliedFilters = allAppliedFilters;
        this.filterKeys = Object.keys(this.allAppliedFilters);
        this.filterChange();
    }
    setTime(type, event) {
        this.timeFilter = true;
        if (type === "fromTime") {
            this.fromTime = event;
        }
        else {
            this.toTime = event;
        }
        ;
    }
    filterChange() {
        let filters = {
            isFilter: true,
            appliedFilterValues: this.allAppliedFilters,
            fromTime: this.timeFilter ? this.fromTime : '',
            toTime: this.timeFilter ? this.toTime : ''
        };
        console.log(filters);
        this.onFilterChange && this.onFilterChange.emit(filters);
    }
    openRestAppliedFilters() {
        this.isCountClicked = true;
    }
    selectedFilterTab(type) {
        this.searchKey = '';
        let indx = findIndex(this.selectedValues, (item) => {
            return item.type == type;
        });
        if (indx > -1) {
            this.selectedCategory = { type: type, value: this.selectedValues[indx].value };
            this.selectFilter(this.selectedCategory.value, this.selectedCategory.type);
        }
        this.selectedFilterTabType1 = type;
    }
    isFilterExists(filter) {
        let indx = findIndex(this.selectedValues, (item) => {
            return item.type == filter && item.value;
        });
        if (indx > -1) {
            return true;
        }
    }
    selectFilter(item, type) {
        let value = {
            type: type,
            value: item
        };
        let indx = findIndex(this.selectedValues, (item) => {
            return item.type == type;
        });
        if (indx > -1) {
            this.selectedValues[indx].value = item;
            this.selectedCategory = { type: type, value: this.selectedValues[indx].value };
        }
        else {
            this.selectedValues.push(value);
            this.selectedCategory = { type: type, value: item };
        }
        console.log(this.selectedValues, this.selectedCategory);
    }
    resetAllFilters() {
        this.fromTime = moment().subtract(3, 'hours').format('LT');
        this.toTime = moment().format('LT');
        this.isFiltersApplied = false;
        this.timeFilter = false;
        this.openFilterBar = false;
        this.searchKey = '';
        this.filterKeys = '';
        this.allAppliedFilters = {};
        this.selectedValues = [];
        this.selectedFilterTabType1 = this.filterKeys1[0];
        this.selectedCategory = {
            type: '',
            value: ''
        };
        this.isCountClicked = false;
        this.filterChange();
    }
    filterData(searchValue) {
        this.list[this.selectedFilterTabType1] = this.listCopy[this.selectedFilterTabType1];
        let filterArr = this.list[this.selectedFilterTabType1];
        if (filterArr && filterArr.length) {
            const data = filterArr.filter((item) => {
                return (item.toLowerCase().startsWith(searchValue.trim().toLowerCase()));
            });
            console.log(this.searchKey, searchValue, "data=>" + data, this.list[this.selectedFilterTabType1]);
            this.list[this.selectedFilterTabType1] = [...data];
        }
    }
}
GenericListFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter',
                template: "<div class=\"dispatch-filters display-flex\">\n    <div class=\"display-flex\">\n      <div *ngIf=\"filterKeys?.length\"\n        [ngClass]=\"(filterKeys.length>2)?'filter-list-container-2 flex-wrap':'filter-list-container-2'\">\n        <ng-container *ngIf=\"isCountClicked\">\n          <div class=\"filter-list\" *ngFor=\"let item of filterKeys;let i = index\">\n            <span class=\"filter-list-data\"> {{item | titlecase}} : {{allAppliedFilters[item]}} </span>\n            <span (click)=\"onRemoveFilter(item)\" class=\"cancle-icon\">\n              x\n            </span>\n          </div>\n        </ng-container>\n  \n  \n        <div class=\"filter-list\" *ngIf=\"!isCountClicked\">\n          <span  class=\"filter-list-data\"> {{filterKeys[0] | titlecase}} : {{allAppliedFilters[filterKeys[0]]}} </span>\n          <span (click)=\"onRemoveFilter(filterKeys[0])\" class=\"cancle-icon\">\n            x\n          </span>\n        </div>\n  \n        <div class=\"filter-list\" *ngIf=\"filterKeys?.length >= 2 && !isCountClicked\">\n          <span  class=\"filter-list-data\"> {{filterKeys[1] | titlecase}} : {{allAppliedFilters[filterKeys[1]]}} </span>\n          <span (click)=\"onRemoveFilter(filterKeys[1])\" class=\"cancle-icon\">\n            x\n          </span>\n        </div>\n  \n        <div (click)=\"openRestAppliedFilters()\" class=\"filter-list cr-ptr\"\n          *ngIf=\"filterKeys.length > 2 && !isCountClicked\">\n          +{{filterKeys.length - 2}}\n        </div>\n  \n      </div>\n      <span\n        class=\"filter-color\"\n        (click)=\"openFilterSideBar()\">\n        <i class=\"fa fa-filter fa-2x icon-margin\"></i>\n        <!-- <span *ngIf=\"totalFilterCount\">({{totalFilterCount}})</span>  -->\n      </span>\n    </div>\n  \n    <div *ngIf=\"openFilterBar\" class=\"filter-position-modal\">\n      <div class=\"modalbody ele\">\n        <div>\n          <div class=\"header-item\">\n            <div>\n              Filter\n            </div>\n            <div class=\"cr-ptr\">\n              <span (click)=\"resetAllFilters()\" class=\"reset-filter\">Reset</span>\n              <span (click)=\"onCancel()\"><img class=\"cancle-icon-1\" src=\"./../../assets/images/crossIcon.png\"></span>\n            </div>\n          </div>\n          <hr>\n  \n          <div class=\"main-body\">\n            <div class=\"side-bar-wrapper\">\n              <div class=\"filter-side-menu\">\n                <div \n                *ngFor=\"let filter of filterKeys1\"  \n                [class.selected]=\"selectedFilterTabType1 === filter || isFilterExists(filter)\"\n                (click)=\"selectedFilterTab(filter)\" class=\"side-menu-tabs\">\n                    {{filter | titlecase}}\n                </div>\n  \n                <div *ngIf=\"paramList?.fromTime && paramList?.toTime\"\n                [class.selected]=\"selectedFilterTabType1 === 'time' || timeFilter\" (click)=\"selectedFilterTab('time')\"\n                class=\"side-menu-tabs\">\n                Select Time\n               </div>\n              </div>\n            </div>\n  \n            <div class=\"vl\"></div>\n  \n            <div class=\"filter-list-wrapper\">\n              <div style=\"margin-left: 22px;\" *ngIf=\"selectedFilterTabType1 !== 'time'\">\n              <input class=\"filter-search-option\" type=\"text\" placeholder=\"Search {{selectedFilterTabType1}}\" matInput\n                [(ngModel)]=\"searchKey\" (keyup)=\"filterData(searchKey)\" />\n             </div>\n              <div  [ngClass]=\"(list[selectedFilterTabType1]?.length > 6) ? 'filter-data-list-scroll-2 filter-data-list' : 'filter-data-list'\">\n                <div \n                *ngFor=\"let item of list[selectedFilterTabType1]\"\n                class=\"filter-content\"\n                (click)=\"selectFilter(item,selectedFilterTabType1)\"\n                [class.selected]=\"selectedCategory.value === item\"\n                >\n                    {{item}}\n                </div>\n  \n                <div *ngIf=\"paramList.selectedTab > 0 && selectedFilterTabType1=='live status'\"\n                [ngClass]=\"(liveStatus?.length > 6) ? 'filter-data-list-scroll-2 filter-data-list' : 'filter-data-list'\">\n                <div (click)=\"selectFilter(item,'live status')\" [class.selected]=\"selectedCategory.value.value === item.value\"\n                  *ngFor=\"let item of liveStatus\" class=\"filter-content\">\n                  {{item.name}}\n                </div>\n                </div>\n  \n                <ng-container *ngIf=\"paramList?.fromTime && paramList?.toTime && selectedFilterTabType1 === 'time'\">\n                  <div *ngIf=\"selectedFilterTabType === 'time'\" class=\"filter-data-list\">\n                    <div class=\"time-input-wrapper\">\n                      <label>From Time</label>\n                      <input matInput class=\"filter-time-input\" [(ngModel)]=\"fromTime\" [ngxTimepicker]=\"picker2\"\n                        placeholder=\"From Time\" readonly>\n                      <ngx-material-timepicker (timeSet)=\"setTime('fromTime',$event)\" #picker2></ngx-material-timepicker>\n                    </div>\n    \n                    <div class=\"time-input-wrapper\">\n                      <label>To Time</label>\n                      <input style=\"margin-left: 26px;\" matInput class=\"filter-time-input\" [(ngModel)]=\"toTime\"\n                        [ngxTimepicker]=\"picker3\" placeholder=\"To Time\" readonly>\n                      <ngx-material-timepicker (timeSet)=\"setTime('toTime',$event)\" #picker3></ngx-material-timepicker>\n                    </div>\n                  </div>\n                </ng-container>\n  \n  \n              </div>\n             \n              <div class=\"apply-btn\">\n                <button (click)=\"applyFilters()\" class=\"app-btn\">\n                  <span>Apply</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  ",
                styles: [".filter-modal-position-2{position:absolute;right:630px;top:109px}.filter-modal-position{position:absolute;right:474px;top:104px}.filter-modal-position-1{position:absolute;right:729px;top:109px}.modalbody{-moz-box-shadow:0 0 16px 0 rgba(0,0,0,.75);-webkit-box-shadow:0 0 16px 0 rgba(0,0,0,.75);background-color:#fff;border-radius:4px;box-shadow:0 0 16px 0 rgba(0,0,0,.75);display:flex;flex-direction:column;font-size:15px;height:400px;overflow:auto;position:fixed;width:400px;z-index:4}.ele{-webkit-animation:fadeIn .3s;-webkit-animation-fill-mode:forwards;animation:fadeIn .3s;animation-fill-mode:forwards;visibility:hidden}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1;visibility:visible}}@keyframes fadeIn{0%{opacity:0}to{opacity:1;visibility:visible}}.cancle-icon-1:hover{background-color:#f1f1f1;border-radius:50%;box-shadow:0 0 0 6px #f1f1f1}.header-item{display:flex;font-size:medium;justify-content:space-between;padding:10px 20px 0}.vl{border-left:1px solid grey;height:-webkit-fill-available;left:30%;margin-left:-4px;margin-top:38px;position:absolute;top:0}hr{margin-bottom:0}.side-menu-tabs{cursor:pointer;padding:14px 14px 14px 16px;width:116px}.side-menu-tabs:hover{background-color:#f1f1f1;color:#f28100}.side-bar-wrapper{width:117px}.main-body{display:flex}.filter-list-wrapper{width:100%}.filter-data-list{padding:10px}.filter-data-list-scroll-2{max-height:275px;overflow-y:scroll;padding:10px}.filter-content{cursor:pointer;padding:10px}.filter-content:hover{width:100%}.filter-content:hover,.filter-data-list .filter-content.selected{background-color:#f1f1f1;color:#f28100}.cr-ptr{cursor:pointer}.cr-ptr,.filter-side-menu .side-menu-tabs.selected{color:#f28100}.reset-filter{color:#f28100;margin-right:10px}.reset-filter:hover{background-color:#f1f1f1;border-radius:0;box-shadow:0 0 0 6px #f1f1f1}.filter-time-input{background:transparent;border:none;border-bottom:1px solid #999;font-size:14px;height:30px!important;height:30px;margin-left:8px;outline:none;padding:13px 9px;width:150px!important}.time-input-wrapper{padding:10px 0}.icon-margin{margin-right:10px;margin-top:-1px}.apply-btn{bottom:10px;position:absolute;right:12px}.filter-search-option{border:none;border-bottom:1px solid #f28100;font-size:14px;margin-bottom:5px;margin-right:20px;outline:none;padding-bottom:5px;padding-top:8px;width:-webkit-fill-available}.filter-list{border:1px solid #f28100;border-radius:12px;color:#000;display:flex;font-size:10px;height:26px;margin:2px;padding:3px 8px}.filter-list-data{-webkit-box-orient:vertical;-webkit-line-clamp:1;display:-webkit-box;overflow:hidden;text-overflow:ellipsis;width:125px}.filter-list-container-2{color:#f28100;display:flex;margin-left:auto;margin-right:5px;margin-top:-1px}.flex-wrap{flex-wrap:wrap;justify-content:flex-end;max-width:385px}.cancle-icon{color:#f28100;cursor:pointer;font-size:14px;font-size:13px;font-weight:700;font-weight:500;padding-left:5px;position:relative;top:-1px}.cancle-icon img{width:9px}.display-flex{display:flex}.filter-icon-position{color:#f28100;padding-right:15px}.filter-icon-position i{cursor:pointer}.filter-lst-show{display:flex;margin-left:auto}.filter-modal-position-3{position:absolute;right:569px;top:109px}.filter-color{color:#f28100;cursor:pointer}.dispatch-filters{position:relative}.dispatch-filters .filter-position-modal{position:absolute;right:430px;top:24px}"]
            },] }
];
GenericListFilterComponent.ctorParameters = () => [];
GenericListFilterComponent.propDecorators = {
    list: [{ type: Input }],
    paramList: [{ type: Input }],
    onFilterChange: [{ type: Output }]
};

class GenericListFilterModule {
}
GenericListFilterModule.decorators = [
    { type: NgModule, args: [{
                declarations: [GenericListFilterComponent],
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    FormsModule,
                    NgxMaterialTimepickerModule
                ],
                exports: [GenericListFilterComponent]
            },] }
];

/*
 * Public API Surface of generic-list-filter
 */

/**
 * Generated bundle index. Do not edit.
 */

export { GenericListFilterComponent, GenericListFilterModule };
//# sourceMappingURL=generic-list-filter.js.map
