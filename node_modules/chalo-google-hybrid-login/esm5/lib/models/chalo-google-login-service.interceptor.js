/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { InjectionToken, Optional, Inject, Injectable } from "@angular/core";
import { CookieService } from "ngx-cookie-service";
import { GoogleLoginService } from "../chalo-google-hybrid-login.service";
import { GOOGLE_LOGIN_CONFIG } from "./chalo-google-login.config";
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-cookie-service';
export var GOOGLE_LOGIN_HTTP_INTERCEPTOR = new InjectionToken('chalo-google-login.interceptor');
var GoogleAuthHttpInterceptor = /** @class */ (function () {
    function GoogleAuthHttpInterceptor(googleLoginInterceptor, cookieService, googleLoginService, config) {
        this.googleLoginInterceptor = googleLoginInterceptor;
        this.cookieService = cookieService;
        this.googleLoginService = googleLoginService;
        this.config = config;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    GoogleAuthHttpInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        if (!(req.url.includes('token') || req.url.includes('authenticated') || req.url.includes('Otp') || req.url.includes('logout')) && this.cookieService.check(this.config.user.loginStateCookie)) {
            /** @type {?} */
            var loginCookie = this.cookieService.get(this.config.user.loginStateCookie);
            if (loginCookie) {
                /** @type {?} */
                var decryptLoginCookie = this.googleLoginService.decryptString(loginCookie);
                if (decryptLoginCookie && decryptLoginCookie === 'loggedOut') {
                    this.googleLoginService.sendLogoutMessage('Signed out');
                }
            }
        }
        if (this.googleLoginInterceptor) {
            return this.googleLoginInterceptor.intercept(req, next);
        }
        else {
            return next.handle(req);
        }
    };
    /** @nocollapse */
    GoogleAuthHttpInterceptor.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [GOOGLE_LOGIN_HTTP_INTERCEPTOR,] }] },
        { type: CookieService },
        { type: GoogleLoginService },
        { type: undefined, decorators: [{ type: Inject, args: [GOOGLE_LOGIN_CONFIG,] }] }
    ]; };
GoogleAuthHttpInterceptor.ɵfac = function GoogleAuthHttpInterceptor_Factory(t) { return new (t || GoogleAuthHttpInterceptor)(ɵngcc0.ɵɵinject(GOOGLE_LOGIN_HTTP_INTERCEPTOR, 8), ɵngcc0.ɵɵinject(ɵngcc1.CookieService), ɵngcc0.ɵɵinject(GoogleLoginService), ɵngcc0.ɵɵinject(GOOGLE_LOGIN_CONFIG)); };
GoogleAuthHttpInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GoogleAuthHttpInterceptor, factory: function (t) { return GoogleAuthHttpInterceptor.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GoogleAuthHttpInterceptor, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [GOOGLE_LOGIN_HTTP_INTERCEPTOR]
            }] }, { type: ɵngcc1.CookieService }, { type: GoogleLoginService }, { type: undefined, decorators: [{
                type: Inject,
                args: [GOOGLE_LOGIN_CONFIG]
            }] }]; }, null); })();
    return GoogleAuthHttpInterceptor;
}());
export { GoogleAuthHttpInterceptor };
if (false) {
    /** @type {?} */
    GoogleAuthHttpInterceptor.prototype.googleLoginInterceptor;
    /** @type {?} */
    GoogleAuthHttpInterceptor.prototype.cookieService;
    /** @type {?} */
    GoogleAuthHttpInterceptor.prototype.googleLoginService;
    /** @type {?} */
    GoogleAuthHttpInterceptor.prototype.config;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbG8tZ29vZ2xlLWxvZ2luLXNlcnZpY2UuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VzIjpbIm5nOi9jaGFsby1nb29nbGUtaHlicmlkLWxvZ2luL2xpYi9tb2RlbHMvY2hhbG8tZ29vZ2xlLWxvZ2luLXNlcnZpY2UuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0UsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzFFLE9BQU8sRUFBcUIsbUJBQW1CLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNyRjs7O0FBQUEsV0FBYSw2QkFBNkIsR0FBRyxJQUFJLGNBQWMsQ0FBa0IsZ0NBQWdDLENBQUMsQ0FBQztBQUNuSDtBQUU4QyxJQUU1QyxtQ0FBdUUsc0JBQXVDLEVBQ3BHLGVBQXNDLGtCQUEyQyxFQUF1QyxNQUF5QjtBQUM3SixRQUZ5RSwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQWlCO0FBQUMsUUFDckcsa0JBQWEsR0FBYixhQUFhO0FBQUUsUUFBdUIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUF5QjtBQUFDLFFBQXNDLFdBQU0sR0FBTixNQUFNLENBQW1CO0FBQUMsS0FFM0o7QUFDSDtBQUNPO0FBQXNCO0FBQXVCO0FBQW1CO0FBQVEsSUFBN0UsNkNBQVM7QUFBTztBQUFzQjtBQUF1QjtBQUFtQjtBQUM1RSxJQURKLFVBQVUsR0FBcUIsRUFBRSxJQUFpQjtBQUFJLFFBQ3BELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxHQUFHLENBQUMs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LEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUF2QkEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVJBLEFBQUEsQUFDQSxBQUFBLEFBUUEsQUFBQSxBQUFBLEFBQUEsQUFaQSxBQVNBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwSW50ZXJjZXB0b3IsIEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBSZXF1ZXN0IH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XG5pbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgT3B0aW9uYWwsIEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IENvb2tpZVNlcnZpY2UgfSBmcm9tIFwibmd4LWNvb2tpZS1zZXJ2aWNlXCI7XG5pbXBvcnQgeyBHb29nbGVMb2dpblNlcnZpY2UgfSBmcm9tIFwiLi4vY2hhbG8tZ29vZ2xlLWh5YnJpZC1sb2dpbi5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBHb29nbGVMb2dpbkNvbmZpZywgR09PR0xFX0xPR0lOX0NPTkZJRyB9IGZyb20gXCIuL2NoYWxvLWdvb2dsZS1sb2dpbi5jb25maWdcIjtcbmV4cG9ydCBjb25zdCBHT09HTEVfTE9HSU5fSFRUUF9JTlRFUkNFUFRPUiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxIdHRwSW50ZXJjZXB0b3I+KCdjaGFsby1nb29nbGUtbG9naW4uaW50ZXJjZXB0b3InKTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEdvb2dsZUF1dGhIdHRwSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoR09PR0xFX0xPR0lOX0hUVFBfSU5URVJDRVBUT1IpIHByaXZhdGUgZ29vZ2xlTG9naW5JbnRlcmNlcHRvcjogSHR0cEludGVyY2VwdG9yLFxuICAgIHByaXZhdGUgY29va2llU2VydmljZTogQ29va2llU2VydmljZSwgcHJpdmF0ZSBnb29nbGVMb2dpblNlcnZpY2U6IEdvb2dsZUxvZ2luU2VydmljZTxhbnk+LEBJbmplY3QoR09PR0xFX0xPR0lOX0NPTkZJRykgIHByaXZhdGUgY29uZmlnIDpHb29nbGVMb2dpbkNvbmZpZykge1xuXG4gIH1cblxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICBpZiAoIShyZXEudXJsLmluY2x1ZGVzKCd0b2tlbicpIHx8IHJlcS51cmwuaW5jbHVkZXMoJ2F1dGhlbnRpY2F0ZWQnKSB8fCByZXEudXJsLmluY2x1ZGVzKCdPdHAnKSB8fCByZXEudXJsLmluY2x1ZGVzKCdsb2dvdXQnKSkgJiYgdGhpcy5jb29raWVTZXJ2aWNlLmNoZWNrKHRoaXMuY29uZmlnLnVzZXIubG9naW5TdGF0ZUNvb2tpZSkpIHtcbiAgICAgIGNvbnN0IGxvZ2luQ29va2llPXRoaXMuY29va2llU2VydmljZS5nZXQodGhpcy5jb25maWcudXNlci5sb2dpblN0YXRlQ29va2llKVxuICAgICAgaWYgKGxvZ2luQ29va2llKSB7XG4gICAgICAgIHZhciBkZWNyeXB0TG9naW5Db29raWU9dGhpcy5nb29nbGVMb2dpblNlcnZpY2UuZGVjcnlwdFN0cmluZyhsb2dpbkNvb2tpZSk7XG4gICAgICAgIGlmKGRlY3J5cHRMb2dpbkNvb2tpZSAmJiBkZWNyeXB0TG9naW5Db29raWU9PT0nbG9nZ2VkT3V0Jyl7XG4gICAgICAgICAgdGhpcy5nb29nbGVMb2dpblNlcnZpY2Uuc2VuZExvZ291dE1lc3NhZ2UoJ1NpZ25lZCBvdXQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5nb29nbGVMb2dpbkludGVyY2VwdG9yKSB7XG4gICAgICByZXR1cm4gdGhpcy5nb29nbGVMb2dpbkludGVyY2VwdG9yLmludGVyY2VwdChyZXEsIG5leHQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpO1xuICAgIH1cbiAgfVxuXG5cbn1cbiJdfQ==