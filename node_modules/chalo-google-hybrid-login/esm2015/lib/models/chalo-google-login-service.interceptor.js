/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { InjectionToken, Optional, Inject, Injectable } from "@angular/core";
import { CookieService } from "ngx-cookie-service";
import { GoogleLoginService } from "../chalo-google-hybrid-login.service";
import { GOOGLE_LOGIN_CONFIG } from "./chalo-google-login.config";
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-cookie-service';
export const GOOGLE_LOGIN_HTTP_INTERCEPTOR = new InjectionToken('chalo-google-login.interceptor');
export class GoogleAuthHttpInterceptor {
    /**
     * @param {?} googleLoginInterceptor
     * @param {?} cookieService
     * @param {?} googleLoginService
     * @param {?} config
     */
    constructor(googleLoginInterceptor, cookieService, googleLoginService, config) {
        this.googleLoginInterceptor = googleLoginInterceptor;
        this.cookieService = cookieService;
        this.googleLoginService = googleLoginService;
        this.config = config;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        if (!(req.url.includes('token') || req.url.includes('authenticated') || req.url.includes('Otp') || req.url.includes('logout')) && this.cookieService.check(this.config.user.loginStateCookie)) {
            /** @type {?} */
            const loginCookie = this.cookieService.get(this.config.user.loginStateCookie);
            if (loginCookie) {
                /** @type {?} */
                var decryptLoginCookie = this.googleLoginService.decryptString(loginCookie);
                if (decryptLoginCookie && decryptLoginCookie === 'loggedOut') {
                    this.googleLoginService.sendLogoutMessage('Signed out');
                }
            }
        }
        if (this.googleLoginInterceptor) {
            return this.googleLoginInterceptor.intercept(req, next);
        }
        else {
            return next.handle(req);
        }
    }
}
GoogleAuthHttpInterceptor.ɵfac = function GoogleAuthHttpInterceptor_Factory(t) { return new (t || GoogleAuthHttpInterceptor)(ɵngcc0.ɵɵinject(GOOGLE_LOGIN_HTTP_INTERCEPTOR, 8), ɵngcc0.ɵɵinject(ɵngcc1.CookieService), ɵngcc0.ɵɵinject(GoogleLoginService), ɵngcc0.ɵɵinject(GOOGLE_LOGIN_CONFIG)); };
GoogleAuthHttpInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GoogleAuthHttpInterceptor, factory: GoogleAuthHttpInterceptor.ɵfac });
/** @nocollapse */
GoogleAuthHttpInterceptor.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [GOOGLE_LOGIN_HTTP_INTERCEPTOR,] }] },
    { type: CookieService },
    { type: GoogleLoginService },
    { type: undefined, decorators: [{ type: Inject, args: [GOOGLE_LOGIN_CONFIG,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GoogleAuthHttpInterceptor, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [GOOGLE_LOGIN_HTTP_INTERCEPTOR]
            }] }, { type: ɵngcc1.CookieService }, { type: GoogleLoginService }, { type: undefined, decorators: [{
                type: Inject,
                args: [GOOGLE_LOGIN_CONFIG]
            }] }]; }, null); })();
if (false) {
    /** @type {?} */
    GoogleAuthHttpInterceptor.prototype.googleLoginInterceptor;
    /** @type {?} */
    GoogleAuthHttpInterceptor.prototype.cookieService;
    /** @type {?} */
    GoogleAuthHttpInterceptor.prototype.googleLoginService;
    /** @type {?} */
    GoogleAuthHttpInterceptor.prototype.config;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbG8tZ29vZ2xlLWxvZ2luLXNlcnZpY2UuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VzIjpbIm5nOi9jaGFsby1nb29nbGUtaHlicmlkLWxvZ2luL2xpYi9tb2RlbHMvY2hhbG8tZ29vZ2xlLWxvZ2luLXNlcnZpY2UuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0UsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzFFLE9BQU8sRUFBcUIsbUJBQW1CLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNyRjs7O0FBQUEsYUFBYSw2QkFBNkIsR0FBRyxJQUFJLGNBQWMsQ0FBa0IsZ0NBQWdDLENBQUMsQ0FBQztBQUduSCxNQUFNO0FBQW1DO0FBQVE7QUFFNUI7QUFBZ0M7QUFBcUM7QUFDekY7QUFBUSxJQURQLFlBQXVFLHNCQUF1QyxFQUNwRyxlQUFzQyxrQkFBMkMsRUFBdUMsTUFBeUI7QUFDN0osUUFGeUUsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUFpQjtBQUFDLFFBQ3JHLGtCQUFhLEdBQWIsYUFBYTtBQUFFLFFBQXVCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBeUI7QUFBQyxRQUFzQyxXQUFNLEdBQU4sTUFBTSxDQUFtQjtBQUFDLEtBRTNKO0FBQ0g7QUFDTztBQUFzQjtBQUF1QjtBQUFtQjtBQUFRLElBQTdFLFNBQVMsQ0FBQyxHQUFxQixFQUFFLElBQWlCO0FBQUksUUFDcEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcE07QUFBNkIsWUFBdkIsTUFBTSxXQUFXLEdBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtBQUNqRixZQUFNLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDeEI7QUFBaUMsZ0JBQXpCLElBQUksa0JBQWtCLEdBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNsRixnQkFBUSxFQUFFLENBQUEsQ0FBQyxrQkFBa0IsSUFBSSxrQkFBa0IsS0FBRyxXQUFXLENBQUMsQ0FBQSxDQUFDO0FBQ25FLG9CQUFVLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNsRSxpQkFBUztBQUNULGFBQU87QUFDUCxTQUFLO0FBQ0wsUUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLFlBQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFBO0FBQzdELFNBQUs7QUFBQyxRQUFBLElBQUksQ0FBQyxDQUFDO0FBQ1osWUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM5QixTQUFLO0FBQ0wsS0FBRztBQUNIO3FEQXhCQyxVQUFVOzJJQUNUO0FBQUM7QUFBbUI7QUFFbEIsNENBQVcsUUFBUSxZQUFJLE1BQU0sU0FBQyw2QkFBNkI7QUFBUyxZQVIvRCxhQUFhO0FBQUksWUFDakIsa0JBQWtCO0FBQUksNENBUWdFLE1BQU0sU0FBQyxtQkFBbUI7QUFBUTs7Ozs7Ozs7Ozs7a0NBQUU7QUFBQztBQUFhO0FBR2pKO0FBQytEO0FBQy9EO0FBQXVEO0FBQXFCO0FBQTREO0FBQXFCO0FBQ3JKOztBQWpCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFHQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQURBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQXZCQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBUkEsQUFBQSxBQUNBLEFBQUEsQUFRQSxBQUFBLEFBQUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBJbnRlcmNlcHRvciwgSHR0cEV2ZW50LCBIdHRwSGFuZGxlciwgSHR0cFJlcXVlc3QgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uL2h0dHBcIjtcbmltcG9ydCB7IEluamVjdGlvblRva2VuLCBPcHRpb25hbCwgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgQ29va2llU2VydmljZSB9IGZyb20gXCJuZ3gtY29va2llLXNlcnZpY2VcIjtcbmltcG9ydCB7IEdvb2dsZUxvZ2luU2VydmljZSB9IGZyb20gXCIuLi9jaGFsby1nb29nbGUtaHlicmlkLWxvZ2luLnNlcnZpY2VcIjtcbmltcG9ydCB7IEdvb2dsZUxvZ2luQ29uZmlnLCBHT09HTEVfTE9HSU5fQ09ORklHIH0gZnJvbSBcIi4vY2hhbG8tZ29vZ2xlLWxvZ2luLmNvbmZpZ1wiO1xuZXhwb3J0IGNvbnN0IEdPT0dMRV9MT0dJTl9IVFRQX0lOVEVSQ0VQVE9SID0gbmV3IEluamVjdGlvblRva2VuPEh0dHBJbnRlcmNlcHRvcj4oJ2NoYWxvLWdvb2dsZS1sb2dpbi5pbnRlcmNlcHRvcicpO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgR29vZ2xlQXV0aEh0dHBJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChHT09HTEVfTE9HSU5fSFRUUF9JTlRFUkNFUFRPUikgcHJpdmF0ZSBnb29nbGVMb2dpbkludGVyY2VwdG9yOiBIdHRwSW50ZXJjZXB0b3IsXG4gICAgcHJpdmF0ZSBjb29raWVTZXJ2aWNlOiBDb29raWVTZXJ2aWNlLCBwcml2YXRlIGdvb2dsZUxvZ2luU2VydmljZTogR29vZ2xlTG9naW5TZXJ2aWNlPGFueT4sQEluamVjdChHT09HTEVfTE9HSU5fQ09ORklHKSAgcHJpdmF0ZSBjb25maWcgOkdvb2dsZUxvZ2luQ29uZmlnKSB7XG5cbiAgfVxuXG4gIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIGlmICghKHJlcS51cmwuaW5jbHVkZXMoJ3Rva2VuJykgfHwgcmVxLnVybC5pbmNsdWRlcygnYXV0aGVudGljYXRlZCcpIHx8IHJlcS51cmwuaW5jbHVkZXMoJ090cCcpIHx8IHJlcS51cmwuaW5jbHVkZXMoJ2xvZ291dCcpKSAmJiB0aGlzLmNvb2tpZVNlcnZpY2UuY2hlY2sodGhpcy5jb25maWcudXNlci5sb2dpblN0YXRlQ29va2llKSkge1xuICAgICAgY29uc3QgbG9naW5Db29raWU9dGhpcy5jb29raWVTZXJ2aWNlLmdldCh0aGlzLmNvbmZpZy51c2VyLmxvZ2luU3RhdGVDb29raWUpXG4gICAgICBpZiAobG9naW5Db29raWUpIHtcbiAgICAgICAgdmFyIGRlY3J5cHRMb2dpbkNvb2tpZT10aGlzLmdvb2dsZUxvZ2luU2VydmljZS5kZWNyeXB0U3RyaW5nKGxvZ2luQ29va2llKTtcbiAgICAgICAgaWYoZGVjcnlwdExvZ2luQ29va2llICYmIGRlY3J5cHRMb2dpbkNvb2tpZT09PSdsb2dnZWRPdXQnKXtcbiAgICAgICAgICB0aGlzLmdvb2dsZUxvZ2luU2VydmljZS5zZW5kTG9nb3V0TWVzc2FnZSgnU2lnbmVkIG91dCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLmdvb2dsZUxvZ2luSW50ZXJjZXB0b3IpIHtcbiAgICAgIHJldHVybiB0aGlzLmdvb2dsZUxvZ2luSW50ZXJjZXB0b3IuaW50ZXJjZXB0KHJlcSwgbmV4dClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSk7XG4gICAgfVxuICB9XG5cblxufVxuIl19