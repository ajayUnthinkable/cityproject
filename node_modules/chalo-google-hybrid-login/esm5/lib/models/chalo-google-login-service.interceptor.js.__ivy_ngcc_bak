/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { InjectionToken, Optional, Inject, Injectable } from "@angular/core";
import { CookieService } from "ngx-cookie-service";
import { GoogleLoginService } from "../chalo-google-hybrid-login.service";
import { GOOGLE_LOGIN_CONFIG } from "./chalo-google-login.config";
/** @type {?} */
export var GOOGLE_LOGIN_HTTP_INTERCEPTOR = new InjectionToken('chalo-google-login.interceptor');
var GoogleAuthHttpInterceptor = /** @class */ (function () {
    function GoogleAuthHttpInterceptor(googleLoginInterceptor, cookieService, googleLoginService, config) {
        this.googleLoginInterceptor = googleLoginInterceptor;
        this.cookieService = cookieService;
        this.googleLoginService = googleLoginService;
        this.config = config;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    GoogleAuthHttpInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        if (!(req.url.includes('token') || req.url.includes('authenticated') || req.url.includes('Otp') || req.url.includes('logout')) && this.cookieService.check(this.config.user.loginStateCookie)) {
            /** @type {?} */
            var loginCookie = this.cookieService.get(this.config.user.loginStateCookie);
            if (loginCookie) {
                /** @type {?} */
                var decryptLoginCookie = this.googleLoginService.decryptString(loginCookie);
                if (decryptLoginCookie && decryptLoginCookie === 'loggedOut') {
                    this.googleLoginService.sendLogoutMessage('Signed out');
                }
            }
        }
        if (this.googleLoginInterceptor) {
            return this.googleLoginInterceptor.intercept(req, next);
        }
        else {
            return next.handle(req);
        }
    };
    GoogleAuthHttpInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    GoogleAuthHttpInterceptor.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [GOOGLE_LOGIN_HTTP_INTERCEPTOR,] }] },
        { type: CookieService },
        { type: GoogleLoginService },
        { type: undefined, decorators: [{ type: Inject, args: [GOOGLE_LOGIN_CONFIG,] }] }
    ]; };
    return GoogleAuthHttpInterceptor;
}());
export { GoogleAuthHttpInterceptor };
if (false) {
    /** @type {?} */
    GoogleAuthHttpInterceptor.prototype.googleLoginInterceptor;
    /** @type {?} */
    GoogleAuthHttpInterceptor.prototype.cookieService;
    /** @type {?} */
    GoogleAuthHttpInterceptor.prototype.googleLoginService;
    /** @type {?} */
    GoogleAuthHttpInterceptor.prototype.config;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbG8tZ29vZ2xlLWxvZ2luLXNlcnZpY2UuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9jaGFsby1nb29nbGUtaHlicmlkLWxvZ2luLyIsInNvdXJjZXMiOlsibGliL21vZGVscy9jaGFsby1nb29nbGUtbG9naW4tc2VydmljZS5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbkQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDMUUsT0FBTyxFQUFxQixtQkFBbUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDOztBQUNyRixXQUFhLDZCQUE2QixHQUFHLElBQUksY0FBYyxDQUFrQixnQ0FBZ0MsQ0FBQyxDQUFDOztJQUtqSCxtQ0FBdUUsc0JBQXVDLEVBQ3BHLGVBQXNDLGtCQUEyQyxFQUF1QyxNQUF5QjtRQURwRiwyQkFBc0IsR0FBdEIsc0JBQXNCLENBQWlCO1FBQ3BHLGtCQUFhLEdBQWIsYUFBYTtRQUF5Qix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQXlCO1FBQXVDLFdBQU0sR0FBTixNQUFNLENBQW1CO0tBRTFKOzs7Ozs7SUFFRCw2Q0FBUzs7Ozs7SUFBVCxVQUFVLEdBQXFCLEVBQUUsSUFBaUI7UUFDaEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7O1lBQzlMLElBQU0sV0FBVyxHQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUE7WUFDM0UsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQzs7Z0JBQ2hCLElBQUksa0JBQWtCLEdBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDMUUsRUFBRSxDQUFBLENBQUMsa0JBQWtCLElBQUksa0JBQWtCLEtBQUcsV0FBVyxDQUFDLENBQUEsQ0FBQztvQkFDekQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO2lCQUN6RDthQUNGO1NBQ0Y7UUFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtTQUN4RDtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDekI7S0FDRjs7Z0JBdkJGLFVBQVU7Ozs7Z0RBR0ksUUFBUSxZQUFJLE1BQU0sU0FBQyw2QkFBNkI7Z0JBUnRELGFBQWE7Z0JBQ2Isa0JBQWtCO2dEQVFvRSxNQUFNLFNBQUMsbUJBQW1COztvQ0Faekg7O1NBU2EseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEludGVyY2VwdG9yLCBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwUmVxdWVzdCB9IGZyb20gXCJAYW5ndWxhci9jb21tb24vaHR0cFwiO1xuaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIE9wdGlvbmFsLCBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBDb29raWVTZXJ2aWNlIH0gZnJvbSBcIm5neC1jb29raWUtc2VydmljZVwiO1xuaW1wb3J0IHsgR29vZ2xlTG9naW5TZXJ2aWNlIH0gZnJvbSBcIi4uL2NoYWxvLWdvb2dsZS1oeWJyaWQtbG9naW4uc2VydmljZVwiO1xuaW1wb3J0IHsgR29vZ2xlTG9naW5Db25maWcsIEdPT0dMRV9MT0dJTl9DT05GSUcgfSBmcm9tIFwiLi9jaGFsby1nb29nbGUtbG9naW4uY29uZmlnXCI7XG5leHBvcnQgY29uc3QgR09PR0xFX0xPR0lOX0hUVFBfSU5URVJDRVBUT1IgPSBuZXcgSW5qZWN0aW9uVG9rZW48SHR0cEludGVyY2VwdG9yPignY2hhbG8tZ29vZ2xlLWxvZ2luLmludGVyY2VwdG9yJyk7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBHb29nbGVBdXRoSHR0cEludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KEdPT0dMRV9MT0dJTl9IVFRQX0lOVEVSQ0VQVE9SKSBwcml2YXRlIGdvb2dsZUxvZ2luSW50ZXJjZXB0b3I6IEh0dHBJbnRlcmNlcHRvcixcbiAgICBwcml2YXRlIGNvb2tpZVNlcnZpY2U6IENvb2tpZVNlcnZpY2UsIHByaXZhdGUgZ29vZ2xlTG9naW5TZXJ2aWNlOiBHb29nbGVMb2dpblNlcnZpY2U8YW55PixASW5qZWN0KEdPT0dMRV9MT0dJTl9DT05GSUcpICBwcml2YXRlIGNvbmZpZyA6R29vZ2xlTG9naW5Db25maWcpIHtcblxuICB9XG5cbiAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgaWYgKCEocmVxLnVybC5pbmNsdWRlcygndG9rZW4nKSB8fCByZXEudXJsLmluY2x1ZGVzKCdhdXRoZW50aWNhdGVkJykgfHwgcmVxLnVybC5pbmNsdWRlcygnT3RwJykgfHwgcmVxLnVybC5pbmNsdWRlcygnbG9nb3V0JykpICYmIHRoaXMuY29va2llU2VydmljZS5jaGVjayh0aGlzLmNvbmZpZy51c2VyLmxvZ2luU3RhdGVDb29raWUpKSB7XG4gICAgICBjb25zdCBsb2dpbkNvb2tpZT10aGlzLmNvb2tpZVNlcnZpY2UuZ2V0KHRoaXMuY29uZmlnLnVzZXIubG9naW5TdGF0ZUNvb2tpZSlcbiAgICAgIGlmIChsb2dpbkNvb2tpZSkge1xuICAgICAgICB2YXIgZGVjcnlwdExvZ2luQ29va2llPXRoaXMuZ29vZ2xlTG9naW5TZXJ2aWNlLmRlY3J5cHRTdHJpbmcobG9naW5Db29raWUpO1xuICAgICAgICBpZihkZWNyeXB0TG9naW5Db29raWUgJiYgZGVjcnlwdExvZ2luQ29va2llPT09J2xvZ2dlZE91dCcpe1xuICAgICAgICAgIHRoaXMuZ29vZ2xlTG9naW5TZXJ2aWNlLnNlbmRMb2dvdXRNZXNzYWdlKCdTaWduZWQgb3V0Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuZ29vZ2xlTG9naW5JbnRlcmNlcHRvcikge1xuICAgICAgcmV0dXJuIHRoaXMuZ29vZ2xlTG9naW5JbnRlcmNlcHRvci5pbnRlcmNlcHQocmVxLCBuZXh0KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKTtcbiAgICB9XG4gIH1cblxuXG59XG4iXX0=