/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { Observable } from 'rxjs';
import { take, shareReplay } from 'rxjs/operators';
import { DOCUMENT } from '@angular/common';
export class ScriptLoadService {
    /**
     * @param {?} document
     */
    constructor(document) {
        this.document = document;
        this.scriptsLoaders = {};
    }
    /**
     *
     * @param {?} url Url of the external script to be loaded
     * @param {?=} attributes Attribute list to be added to the script element
     * @param {?=} targetEl Target element for the placing script tag. It can be a selector or a element reference
     * @return {?}
     */
    loadScript(url, attributes, targetEl = 'head') {
        return this.scriptsLoaders[url] = this.scriptsLoaders[url] || new Observable((observer) => {
            /** @type {?} */
            const script = this.document.createElement('script');
            if (attributes) {
                for (const key in attributes) {
                    if (attributes.hasOwnProperty(key)) {
                        script.setAttribute(key, attributes[key]);
                    }
                }
            }
            script.onload = (event) => {
                console.log('onload', event);
                observer.next(event);
                observer.complete();
            };
            script.onerror = err => {
                console.log('sdad', err);
                observer.error(err);
            };
            script.src = url;
            /** @type {?} */
            const targetElement = typeof targetEl === 'string' ? this.document.querySelector(targetEl) : targetEl;
            targetElement.appendChild(script);
        })
            .pipe(take(1), shareReplay(1));
    }
}
ScriptLoadService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ScriptLoadService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
if (false) {
    /** @type {?} */
    ScriptLoadService.prototype.scriptsLoaders;
    /** @type {?} */
    ScriptLoadService.prototype.document;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LWxvYWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2NoYWxvLWdvb2dsZS1oeWJyaWQtbG9naW4vIiwic291cmNlcyI6WyJsaWIvc2NyaXB0LWxvYWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUd6QyxNQUFNOzs7O0lBRUosWUFBc0MsUUFBYTtRQUFiLGFBQVEsR0FBUixRQUFRLENBQUs7OEJBSy9DLEVBQUU7S0FKTDs7Ozs7Ozs7SUFZRCxVQUFVLENBQUMsR0FBVyxFQUFFLFVBQW9DLEVBQUUsV0FBaUMsTUFBTTtRQUNuRyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksVUFBVSxDQUFRLENBQUMsUUFBUSxFQUFFLEVBQUU7O1lBQy9GLE1BQU0sTUFBTSxHQUFzQixJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUV4RSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUNmLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUM7b0JBQzdCLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUNuQyxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztxQkFDM0M7aUJBQ0Y7YUFDRjtZQUVELE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFZLEVBQUUsRUFBRTtnQkFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQzdCLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3JCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUNyQixDQUFDO1lBRUYsTUFBTSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsRUFBRTtnQkFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ3pCLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDckIsQ0FBQztZQUVGLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDOztZQUVqQixNQUFNLGFBQWEsR0FBZ0IsT0FBTyxRQUFRLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1lBQ25ILGFBQWEsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDbkMsQ0FBQzthQUNELElBQUksQ0FDSCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUNmLENBQUM7S0FDSDs7O1lBaERGLFVBQVU7Ozs7NENBR0ksTUFBTSxTQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGUsIEluamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHt0YWtlLCBzaGFyZVJlcGxheX0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNjcmlwdExvYWRTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBhbnkpIHtcbiAgfVxuXG4gIHByaXZhdGUgc2NyaXB0c0xvYWRlcnM6IHtcbiAgICBbdXJsOiBzdHJpbmddOiBPYnNlcnZhYmxlPEV2ZW50PlxuICB9ID0ge307XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB1cmwgVXJsIG9mIHRoZSBleHRlcm5hbCBzY3JpcHQgdG8gYmUgbG9hZGVkXG4gICAqIEBwYXJhbSBhdHRyaWJ1dGVzIEF0dHJpYnV0ZSBsaXN0IHRvIGJlIGFkZGVkIHRvIHRoZSBzY3JpcHQgZWxlbWVudFxuICAgKiBAcGFyYW0gdGFyZ2V0RWwgVGFyZ2V0IGVsZW1lbnQgZm9yIHRoZSBwbGFjaW5nIHNjcmlwdCB0YWcuIEl0IGNhbiBiZSBhIHNlbGVjdG9yIG9yIGEgZWxlbWVudCByZWZlcmVuY2VcbiAgICovXG4gIGxvYWRTY3JpcHQodXJsOiBzdHJpbmcsIGF0dHJpYnV0ZXM/OiB7IFtzOiBzdHJpbmddOiBzdHJpbmcgfSwgdGFyZ2V0RWw6IEhUTUxFbGVtZW50IHwgc3RyaW5nID0gJ2hlYWQnKTogT2JzZXJ2YWJsZTxFdmVudD4ge1xuICAgIHJldHVybiB0aGlzLnNjcmlwdHNMb2FkZXJzW3VybF0gPSB0aGlzLnNjcmlwdHNMb2FkZXJzW3VybF0gfHwgbmV3IE9ic2VydmFibGU8RXZlbnQ+KChvYnNlcnZlcikgPT4ge1xuICAgICAgY29uc3Qgc2NyaXB0OiBIVE1MU2NyaXB0RWxlbWVudCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cbiAgICAgIGlmIChhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICBpZiAoYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBzY3JpcHQuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2NyaXB0Lm9ubG9hZCA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ29ubG9hZCcsIGV2ZW50KTtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dChldmVudCk7XG4gICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICB9O1xuXG4gICAgICBzY3JpcHQub25lcnJvciA9IGVyciA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzZGFkJywgZXJyKTtcbiAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgIH07XG5cbiAgICAgIHNjcmlwdC5zcmMgPSB1cmw7XG5cbiAgICAgIGNvbnN0IHRhcmdldEVsZW1lbnQ6IEhUTUxFbGVtZW50ID0gdHlwZW9mIHRhcmdldEVsID09PSAnc3RyaW5nJyA/IHRoaXMuZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRFbCkgOiB0YXJnZXRFbDtcbiAgICAgIHRhcmdldEVsZW1lbnQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICB9KVxuICAgIC5waXBlKFxuICAgICAgdGFrZSgxKSxcbiAgICAgIHNoYXJlUmVwbGF5KDEpXG4gICAgKTtcbiAgfVxufVxuIl19